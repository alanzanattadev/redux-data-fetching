// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Configurer returns the differents models 1`] = `
Object {
  "DataFetcher": [Function],
  "DataHandlers": [Function],
  "GraphQLConnecter": [Function],
  "actions": Object {
    "bustQueryCache": [Function],
    "fetchData": [Function],
    "mutateData": [Function],
    "packageData": [Function],
    "queryFailed": [Function],
    "queryStarted": [Function],
    "removeData": [Function],
  },
  "middleware": [Function],
  "normalizrModel": Object {
    "converters": Object {
      "users": "User",
    },
    "entities": Object {
      "User": EntitySchema {
        "_getId": [Function],
        "_idAttribute": "id",
        "_key": "User",
        "_mergeStrategy": [Function],
        "_processStrategy": [Function],
        "schema": Object {},
      },
    },
  },
  "recordsModel": Object {
    "RootQuery": [Function],
    "User": [Function],
  },
  "reducer": [Function],
  "selectorSchema": GraphQLSchema {
    "_directives": Array [
      GraphQLDirective {
        "args": Array [
          Object {
            "astNode": undefined,
            "defaultValue": undefined,
            "description": "Included when true.",
            "name": "if",
            "type": "Boolean!",
          },
        ],
        "astNode": undefined,
        "description": "Directs the executor to include this field or fragment only when the \`if\` argument is true.",
        "locations": Array [
          "FIELD",
          "FRAGMENT_SPREAD",
          "INLINE_FRAGMENT",
        ],
        "name": "include",
      },
      GraphQLDirective {
        "args": Array [
          Object {
            "astNode": undefined,
            "defaultValue": undefined,
            "description": "Skipped when true.",
            "name": "if",
            "type": "Boolean!",
          },
        ],
        "astNode": undefined,
        "description": "Directs the executor to skip this field or fragment when the \`if\` argument is true.",
        "locations": Array [
          "FIELD",
          "FRAGMENT_SPREAD",
          "INLINE_FRAGMENT",
        ],
        "name": "skip",
      },
      GraphQLDirective {
        "args": Array [
          Object {
            "astNode": undefined,
            "defaultValue": "No longer supported",
            "description": "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/).",
            "name": "reason",
            "type": "String",
          },
        ],
        "astNode": undefined,
        "description": "Marks an element of a GraphQL schema as no longer supported.",
        "locations": Array [
          "FIELD_DEFINITION",
          "ENUM_VALUE",
        ],
        "name": "deprecated",
      },
    ],
    "_implementations": Object {},
    "_mutationType": undefined,
    "_queryType": "SelectorsRootQueryType",
    "_subscriptionType": undefined,
    "_typeMap": Object {
      "Boolean": "Boolean",
      "SelectorsRootQueryType": "SelectorsRootQueryType",
      "String": "String",
      "UserSelector": "UserSelector",
      "__Directive": "__Directive",
      "__DirectiveLocation": "__DirectiveLocation",
      "__EnumValue": "__EnumValue",
      "__Field": "__Field",
      "__InputValue": "__InputValue",
      "__Schema": "__Schema",
      "__Type": "__Type",
      "__TypeKind": "__TypeKind",
    },
    "astNode": null,
  },
}
`;
