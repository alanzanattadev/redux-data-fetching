// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Selectors convertsQueryToSelectorQuery converts name of fragment type in selector name 1`] = `
Object {
  "definitions": Array [
    Object {
      "directives": Array [],
      "kind": "OperationDefinition",
      "loc": Object {
        "end": 101,
        "start": 11,
      },
      "name": null,
      "operation": "query",
      "selectionSet": Object {
        "kind": "SelectionSet",
        "loc": Object {
          "end": 101,
          "start": 11,
        },
        "selections": Array [
          Object {
            "alias": null,
            "arguments": Array [],
            "directives": Array [],
            "kind": "Field",
            "loc": Object {
              "end": 89,
              "start": 25,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 30,
                "start": 25,
              },
              "value": "users",
            },
            "selectionSet": Object {
              "kind": "SelectionSet",
              "loc": Object {
                "end": 89,
                "start": 31,
              },
              "selections": Array [
                Object {
                  "directives": Array [],
                  "kind": "FragmentSpread",
                  "loc": Object {
                    "end": 55,
                    "start": 47,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 55,
                      "start": 50,
                    },
                    "value": "infos",
                  },
                },
                Object {
                  "alias": null,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "loc": Object {
                    "end": 75,
                    "start": 71,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 75,
                      "start": 71,
                    },
                    "value": "name",
                  },
                  "selectionSet": null,
                },
              ],
            },
          },
        ],
      },
      "variableDefinitions": null,
    },
    Object {
      "directives": Array [],
      "kind": "FragmentDefinition",
      "loc": Object {
        "end": 164,
        "start": 113,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 127,
          "start": 122,
        },
        "value": "infos",
      },
      "selectionSet": Object {
        "kind": "SelectionSet",
        "loc": Object {
          "end": 164,
          "start": 136,
        },
        "selections": Array [
          Object {
            "alias": null,
            "arguments": Array [],
            "directives": Array [],
            "kind": "Field",
            "loc": Object {
              "end": 152,
              "start": 150,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 152,
                "start": 150,
              },
              "value": "id",
            },
            "selectionSet": null,
          },
        ],
      },
      "typeCondition": Object {
        "kind": "NamedType",
        "loc": Object {
          "end": 135,
          "start": 131,
        },
        "name": Object {
          "kind": "Name",
          "loc": Object {
            "end": 135,
            "start": 131,
          },
          "value": "UserSelector",
        },
      },
    },
  ],
  "kind": "Document",
  "loc": Object {
    "end": 173,
    "start": 0,
  },
}
`;

exports[`Selectors convertsTypesSchemaToSelectorSchema converts simple schema to selector schema 1`] = `
GraphQLSchema {
  "_directives": Array [
    GraphQLDirective {
      "args": Array [
        Object {
          "astNode": undefined,
          "defaultValue": undefined,
          "description": "Included when true.",
          "name": "if",
          "type": "Boolean!",
        },
      ],
      "astNode": undefined,
      "description": "Directs the executor to include this field or fragment only when the \`if\` argument is true.",
      "locations": Array [
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT",
      ],
      "name": "include",
    },
    GraphQLDirective {
      "args": Array [
        Object {
          "astNode": undefined,
          "defaultValue": undefined,
          "description": "Skipped when true.",
          "name": "if",
          "type": "Boolean!",
        },
      ],
      "astNode": undefined,
      "description": "Directs the executor to skip this field or fragment when the \`if\` argument is true.",
      "locations": Array [
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT",
      ],
      "name": "skip",
    },
    GraphQLDirective {
      "args": Array [
        Object {
          "astNode": undefined,
          "defaultValue": "No longer supported",
          "description": "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/).",
          "name": "reason",
          "type": "String",
        },
      ],
      "astNode": undefined,
      "description": "Marks an element of a GraphQL schema as no longer supported.",
      "locations": Array [
        "FIELD_DEFINITION",
        "ENUM_VALUE",
      ],
      "name": "deprecated",
    },
  ],
  "_implementations": Object {},
  "_mutationType": undefined,
  "_queryType": "SelectorsRootQueryType",
  "_subscriptionType": undefined,
  "_typeMap": Object {
    "Boolean": "Boolean",
    "Int": "Int",
    "SelectorsRootQueryType": "SelectorsRootQueryType",
    "SkillSelector": "SkillSelector",
    "String": "String",
    "UserSelector": "UserSelector",
    "__Directive": "__Directive",
    "__DirectiveLocation": "__DirectiveLocation",
    "__EnumValue": "__EnumValue",
    "__Field": "__Field",
    "__InputValue": "__InputValue",
    "__Schema": "__Schema",
    "__Type": "__Type",
    "__TypeKind": "__TypeKind",
  },
  "astNode": null,
}
`;

exports[`Selectors convertsTypesSchemaToSelectorSchema resolves to result of the needs 1`] = `
Object {
  "females": Array [
    Object {
      "friends": Array [
        Object {
          "id": 1,
          "name": "Alan",
        },
      ],
      "id": 2,
    },
  ],
  "users": Array [
    Object {
      "friends": Array [
        Object {
          "friends": Array [
            Object {
              "id": 1,
              "name": "Alan",
            },
          ],
          "id": 2,
        },
        Object {
          "friends": Array [
            Object {
              "id": 1,
              "name": "Alan",
            },
          ],
          "id": 3,
        },
      ],
      "id": 1,
    },
    Object {
      "friends": Array [
        Object {
          "friends": Array [
            Object {
              "id": 2,
              "name": "Sophie",
            },
            Object {
              "id": 3,
              "name": "Antoine",
            },
          ],
          "id": 1,
        },
      ],
      "id": 3,
    },
  ],
}
`;

exports[`Selectors convertsTypesSchemaToSelectorSchema resolves to result of the needs with fragments 1`] = `
Object {
  "females": Array [
    Object {
      "friends": Array [
        Object {
          "friends": Array [
            Object {
              "id": 2,
              "name": "Sophie",
            },
            Object {
              "id": 3,
              "name": "Antoine",
            },
          ],
          "id": 1,
          "name": "Alan",
        },
      ],
      "id": 2,
      "name": "Sophie",
    },
  ],
  "users": Array [
    Object {
      "friends": Array [
        Object {
          "friends": Array [
            Object {
              "id": 1,
              "name": "Alan",
            },
          ],
          "id": 2,
          "name": "Sophie",
        },
        Object {
          "friends": Array [
            Object {
              "id": 1,
              "name": "Alan",
            },
          ],
          "id": 3,
          "name": "Antoine",
        },
      ],
      "id": 1,
      "name": "Alan",
    },
    Object {
      "friends": Array [
        Object {
          "friends": Array [
            Object {
              "id": 2,
              "name": "Sophie",
            },
            Object {
              "id": 3,
              "name": "Antoine",
            },
          ],
          "id": 1,
          "name": "Alan",
        },
      ],
      "id": 3,
      "name": "Antoine",
    },
  ],
}
`;

exports[`Selectors convertsTypesSchemaToSelectorSchema throws when db is not passed in contextValue 1`] = `
Array [
  [GraphQLError: You have to pass database (entities and results) as db and graphql query as queryHash in contextValue],
]
`;
