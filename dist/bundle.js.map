{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 758b9784e65afb0db014","webpack:///./lib/graphqlTypesConverters.js","webpack:///external {\"commonjs2\":\"graphql\",\"commonjs\":\"graphql\",\"amd\":\"graphql\"}","webpack:///external {\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}","webpack:///./lib/reducer.js","webpack:///./lib/Mutation.js","webpack:///external {\"commonjs2\":\"normalizr\",\"commonjs\":\"normalizr\",\"amd\":\"normalizr\"}","webpack:///./lib/utils.js","webpack:///./lib/index.js","webpack:///./lib/configurer.js","webpack:///./lib/middleware.js","webpack:///./lib/Query.js","webpack:///./lib/actions.js","webpack:///./lib/hoc.js","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack:///./lib/selectors.js"],"names":["isEntity","createEntitiesForTypes","getRecordSchemaForType","createRecordsForTypes","getDefinitionOfType","addDefinitionsForTypes","getConvertersFromSchema","getDataFromResponse","graphQLizr","graphQLRecordr","convertsEntityToRecord","convertsNormalizedEntitiesToRecords","convertsGraphQLResultToRootEntitiesIDs","convertsGraphQLQueryResultToRecords","convertsGraphQLResultToRecords","isGraphQLIntegratedType","typeName","includes","graphQLType","markers","Object","keys","getFields","reduce","red","fieldName","typesMap","assign","Entity","type","undefined","entities","fields","field","name","definition","length","ofType","forEach","define","schema","getNameOfType","entityType","queryTypeConverters","getQueryType","mutationType","getMutationType","mutationTypeConverters","converters","data","key","Array","isArray","_typeMap","getTypeMap","records","entity","graphQLSchema","recordsTypes","console","error","Error","getType","warn","map","v","reduction","entityId","result","set","filter","id","associatedQuery","recordTypes","rootQuery","queries","convertedField","configureReducer","QUERY_PROGRESS_NOT_STARTED","QUERY_PROGRESS_PENDING","QUERY_PROGRESS_SUCCEED","QUERY_PROGRESS_FAILED","ResultsRecord","byQuery","byEntity","QueryRecord","results","progress","DataReducerRecord","normalizrTypes","warnBadIDRequest","supposedId","getID","toString","reducer","state","action","normalizrModel","payload","normalized","JSON","parse","stringify","update","mergeDeepWith","a","b","query","request","hash","response","raw","value","deleteIn","remove","queryID","Mutation","mutationQL","variables","onError","onCompleted","operationName","hashString","hashMutationQuery","generateUUID","selectedDataHaveChanged","str","i","char","charCodeAt","d","Date","getTime","performance","now","replace","c","r","Math","random","floor","TypeInfoWithValuesComparator","reducer1","reducer2","queryHash1","queryHash2","_value1Stack","_value2Stack","_reducer1","_reducer2","_queryHash1","_queryHash2","_shouldBreak","node","queryHash","queryResult","getIn","alias","currentType","namedType","lastValue","selectionSet","isList","_getEntityValue","fieldValue","entityName","value1","value2","some","v1","_haveChanged","get","kind","FIELD","getParentType","_schema","_getQueryValue","unshift","push","peek","pop","typeInfo","hasChanged","enter","shouldBreak","configure","default","context","rootValue","__debug","graphQLCompiledSchema","selectorSchema","recordsModel","actions","middleware","typesSchema","GraphQLConnecter","DataFetcher","DataHandlers","store","next","graphql","queryQL","ql","dispatch","queryStarted","variableValues","dependencies","then","errors","packageData","queryFailed","mutation","Query","configureActions","mutateData","fetchData","needs","bustQueryCache","removeData","identifiers","configureConnecter","reducerName","mapMutationsToProps","DataHandlersHOC","Comp","props","__uniqueID","bind","getReducer","mutationsProps","names","linkedQueries","getLinkedQueries","infos","propName","info","handlerName","mutationsMap","handlers","getLinkedQueryStates","Component","mapPropsToNeeds","mapCacheToProps","shouldRefetch","queryProgressPropName","WrappedComponent","selectedData","getNeeds","selectData","nextProps","currentReducer","nextReducer","currentNeeds","nextNeeds","nextQuery","currentQuery","mustReselectData","prevProps","warnAgainstEmptyQuery","resetSelection","log","db","convertedData","reducerChanged","setState","queryProgress","convertsFieldToSelectorField","convertsTypeToSelectorType","convertsTypeMapToSelectorTypeMap","convertsRootQueryToSelectorRootQuery","convertsTypesSchemaToSelectorSchema","getResolveQuery","resolveQuery","parent","args","returnType","path","getEntityTypeNameFromSelectorTypeName","getResolveEntity","resolveEntity","getSelectorTypeName","substring","getSelectorTypeFromType","convertsArgsArrayToArgsMap","arg","resolver","description","resolve","typeMap","selectorName","newTypeMap","startsWith","selectorTypeMap","selectorTypesMap","typesQuery","selectorTypesQuery"],"mappings":"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","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"graphql\"), require(\"immutable\"), require(\"normalizr\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"graphql\", \"immutable\", \"normalizr\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReduxDataFetching\"] = factory(require(\"graphql\"), require(\"immutable\"), require(\"normalizr\"), require(\"react\"));\n\telse\n\t\troot[\"ReduxDataFetching\"] = factory(root[undefined], root[undefined], root[undefined], root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_13__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 758b9784e65afb0db014","\"use babel\";\r\n// @flow\r\n\r\nimport { schema } from \"normalizr\";\r\nimport {\r\n  printSchema,\r\n  graphql,\r\n  GraphQLObjectType,\r\n  GraphQLSchema,\r\n  GraphQLString,\r\n  GraphQLFloat,\r\n  GraphQLList,\r\n  GraphQLInt,\r\n  GraphQLBoolean,\r\n  GraphQLID,\r\n  GraphQLEnumType,\r\n  getNullableType,\r\n  getNamedType,\r\n} from \"graphql\";\r\nimport type {\r\n  GraphQLSchema as GraphQLSchemaType,\r\n  GraphQLNamedType,\r\n  GraphQLType,\r\n  GraphQLOutputType,\r\n  GraphQLField,\r\n} from \"graphql\";\r\nimport { Record, Map, List } from \"immutable\";\r\nimport type { Record as RecordType } from \"immutable\";\r\n\r\ntype RecordTypes = { [typeName: string]: RecordType<*> };\r\n\r\nfunction isGraphQLIntegratedType(typeName: string): boolean {\r\n  return [\r\n    \"String\",\r\n    \"Boolean\",\r\n    \"Int\",\r\n    \"ID\",\r\n    \"Float\",\r\n    \"__Schema\",\r\n    \"__Type\",\r\n    \"__TypeKind\",\r\n    \"__Field\",\r\n    \"__InputValue\",\r\n    \"__EnumValue\",\r\n    \"__Directive\",\r\n    \"__DirectiveLocation\",\r\n  ].includes(typeName);\r\n}\r\n\r\nexport function isEntity(\r\n  graphQLType: GraphQLNamedType,\r\n  markers: Array<string> = [\"id\"],\r\n): boolean {\r\n  return (\r\n    graphQLType instanceof GraphQLObjectType &&\r\n    Object.keys(graphQLType.getFields()).reduce(\r\n      (red, fieldName) => red || markers.includes(fieldName),\r\n      false,\r\n    )\r\n  );\r\n}\r\n\r\nexport function createEntitiesForTypes(\r\n  typesMap: { [typeName: string]: GraphQLNamedType },\r\n  markers: Array<string>,\r\n): { [typeName: string]: schema.Entity } {\r\n  return Object.keys(typesMap).reduce(\r\n    (red, typeName) =>\r\n      isGraphQLIntegratedType(typeName) ||\r\n      !isEntity(typesMap[typeName], markers)\r\n        ? red\r\n        : Object.assign(red, { [typeName]: new schema.Entity(typeName) }, {}),\r\n    {},\r\n  );\r\n}\r\n\r\nexport function getRecordSchemaForType(\r\n  type: GraphQLObjectType,\r\n): { [fieldName: string]: typeof undefined } {\r\n  return Object.keys(type.getFields()).reduce(\r\n    (red, fieldName) => Object.assign({}, red, { [fieldName]: undefined }),\r\n    {},\r\n  );\r\n}\r\n\r\nexport function createRecordsForTypes(typesMap: {\r\n  [typeName: string]: $FlowFixMe,\r\n}) {\r\n  return Object.keys(typesMap).reduce(\r\n    (red, typeName) =>\r\n      isGraphQLIntegratedType(typeName) ||\r\n      !(typesMap[typeName] instanceof GraphQLObjectType)\r\n        ? red\r\n        : Object.assign(red, {\r\n            [typeName]: Record(\r\n              getRecordSchemaForType(typesMap[typeName]),\r\n              typeName,\r\n            ),\r\n          }),\r\n    {},\r\n  );\r\n}\r\n\r\nexport function getDefinitionOfType(\r\n  graphQLType: GraphQLType,\r\n  entities: { [typeName: string]: schema.Entity },\r\n) {\r\n  if (graphQLType instanceof GraphQLObjectType) {\r\n    const fields = Object.keys(\r\n      graphQLType.getFields(),\r\n    ).reduce((red, fieldName) => {\r\n      // $FlowFixMe\r\n      const field = graphQLType.getFields()[fieldName];\r\n      // $FlowFixMe\r\n      if (field.type.name in entities)\r\n        return Object.assign({}, red, {\r\n          // $FlowFixMe\r\n          [fieldName]: entities[field.type.name],\r\n        });\r\n      else {\r\n        const definition = getDefinitionOfType(field.type, entities);\r\n        if (definition)\r\n          return Object.assign({}, red, { [fieldName]: definition });\r\n        else return red;\r\n      }\r\n    }, {});\r\n    if (Object.keys(fields).length > 0) return fields;\r\n    else return undefined;\r\n  } else if (graphQLType instanceof GraphQLList) {\r\n    if (graphQLType.ofType.name in entities)\r\n      return [entities[graphQLType.ofType.name]];\r\n    else return undefined;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport function addDefinitionsForTypes(\r\n  typesMap: { [typeName: string]: GraphQLNamedType },\r\n  entities: { [typeName: string]: schema.Entity },\r\n): void {\r\n  Object.keys(typesMap).forEach(typeName => {\r\n    if (\r\n      isGraphQLIntegratedType(typeName) === false &&\r\n      entities[typeName] instanceof schema.Entity\r\n    ) {\r\n      const definition = getDefinitionOfType(typesMap[typeName], entities);\r\n      entities[typeName].define(definition || {});\r\n    }\r\n  });\r\n}\r\n\r\nexport function getConvertersFromSchema(\r\n  schema: GraphQLSchemaType,\r\n): { [fieldName: string]: string } {\r\n  function getNameOfType(type: GraphQLOutputType): string {\r\n    let entityType;\r\n    if (type instanceof GraphQLList) entityType = getNamedType(type).name;\r\n    else if (type instanceof GraphQLEnumType) entityType = type.name;\r\n    else entityType = getNamedType(type).name;\r\n    return entityType;\r\n  }\r\n\r\n  const queryTypeConverters = Object.keys(\r\n    schema.getQueryType().getFields(),\r\n  ).reduce((red, field) => {\r\n    const type = schema.getQueryType().getFields()[field].type;\r\n    const entityType = getNamedType(type);\r\n    return Object.assign({}, red, { [field]: entityType });\r\n  }, {});\r\n\r\n  const mutationType = schema.getMutationType();\r\n  const mutationTypeConverters = mutationType\r\n    ? Object.keys(mutationType.getFields()).reduce((red, field) => {\r\n        const type = mutationType.getFields()[field].type;\r\n        const entityType = getNamedType(type);\r\n        return Object.assign({}, red, { [field]: entityType });\r\n      }, {})\r\n    : {};\r\n\r\n  return { ...mutationTypeConverters, ...queryTypeConverters };\r\n}\r\n\r\nexport function getDataFromResponse(\r\n  converters: { [fieldName: string]: string },\r\n  data: Object,\r\n) {\r\n  return Object.keys(data).reduce((red, key) => {\r\n    return Object.assign({}, red, {\r\n      [converters[key]]: Array.isArray(data[key]) ? data[key] : [data[key]],\r\n    });\r\n  }, {});\r\n}\r\n\r\nexport function graphQLizr(\r\n  schema: GraphQLSchemaType,\r\n  { markers = [\"id\"] }: { markers: Array<string> } = {},\r\n): {\r\n  entities: { [typeName: string]: schema.Entity },\r\n  converters: { [fieldName: string]: string },\r\n} {\r\n  const entities = createEntitiesForTypes(schema._typeMap, markers);\r\n  const converters = getConvertersFromSchema(schema);\r\n  addDefinitionsForTypes(schema.getTypeMap(), entities);\r\n  return { entities, converters };\r\n}\r\n\r\nexport function graphQLRecordr(schema: GraphQLSchemaType) {\r\n  const records = createRecordsForTypes(schema.getTypeMap());\r\n  return records;\r\n}\r\n\r\nexport function convertsEntityToRecord(\r\n  entity?: ?Object | mixed,\r\n  type: string,\r\n  graphQLSchema: GraphQLSchemaType,\r\n  recordsTypes: RecordTypes,\r\n): RecordType<*> | mixed {\r\n  if (typeof entity !== \"object\" || entity == null) return entity;\r\n  if (Array.isArray(entity) === true) {\r\n    console.error(\"Trying to convert\", entity, \"into a Record of type\", type);\r\n    throw new Error(\r\n      \"ILS is trying to convert an Array in a Record which is impossible, you may have called packageData with wrong types (Array instead of Object) or something wrong with the normalization\",\r\n    );\r\n  }\r\n  const graphQLType = graphQLSchema.getType(type);\r\n  if (recordsTypes[type] == null) {\r\n    console.error(\r\n      \"You try to convert an entity of type\",\r\n      type,\r\n      \"into a Record but the type doesn't exist.\\n\",\r\n      \"Types that exist are\",\r\n      recordsTypes,\r\n      \"Entity value:\",\r\n      entity,\r\n      \"\\nYou may have actions.packageData({ typeThatDoesntExist: value }).\",\r\n    );\r\n    throw new Error(\"Aborting conversion of entity to immutable Record\");\r\n  }\r\n  // $FlowFixMe\r\n  return new recordsTypes[type](\r\n    Object.keys(entity).reduce((red, key) => {\r\n      if (\r\n        graphQLType instanceof GraphQLObjectType &&\r\n        graphQLType.getFields()[key] == null\r\n      ) {\r\n        console.warn(\r\n          \"Trying to assign field\",\r\n          key,\r\n          \"to entity of type\",\r\n          type,\r\n          \"but it doesn't exist in the graphql data model. You may want to update the schema to have this new field. Aborting assignment\",\r\n        );\r\n        return red;\r\n      }\r\n      // $FlowFixMe\r\n      const field = entity[key];\r\n      if (\r\n        typeof field == \"object\" &&\r\n        Array.isArray(field) == false &&\r\n        field != null\r\n      ) {\r\n        if (\r\n          graphQLSchema.getTypeMap()[type] == null ||\r\n          !(graphQLSchema.getTypeMap()[type] instanceof GraphQLObjectType) ||\r\n          // $FlowFixMe\r\n          graphQLSchema.getTypeMap()[type].getFields()[key] == null\r\n        ) {\r\n          console.error(\r\n            \"Error trying to convert entity\",\r\n            entity,\r\n            \"to record of type\",\r\n            type,\r\n          );\r\n          throw new Error(\r\n            `Error has been detected when trying to access the field with key ${key}, if key is a number you may have wrapped data, sent to packageData, in an array where you shouldn't`,\r\n          );\r\n        }\r\n        return Object.assign({}, red, {\r\n          [key]: convertsEntityToRecord(\r\n            field,\r\n            // $FlowFixMe\r\n            graphQLSchema.getTypeMap()[type].getFields()[key].type.name,\r\n            graphQLSchema,\r\n            recordsTypes,\r\n          ),\r\n        });\r\n      } else if (typeof field == \"object\" && Array.isArray(field) === true) {\r\n        return Object.assign({}, red, {\r\n          [key]: field.map(\r\n            v =>\r\n              typeof v === \"object\"\r\n                ? convertsEntityToRecord(\r\n                    v,\r\n                    // $FlowFixMe\r\n                    graphQLSchema.getTypeMap()[type].getFields()[key].type\r\n                      .ofType.name,\r\n                    graphQLSchema,\r\n                    recordsTypes,\r\n                  )\r\n                : v,\r\n          ),\r\n        });\r\n      } else {\r\n        return Object.assign({}, red, { [key]: field });\r\n      }\r\n    }, {}),\r\n  );\r\n}\r\n\r\nexport function convertsNormalizedEntitiesToRecords(\r\n  entities: { [typeName: string]: { [id: string]: Object } },\r\n  recordsTypes: RecordTypes,\r\n  graphQLSchema: GraphQLSchemaType,\r\n): { [typeName: string]: { [id: string]: RecordType<*> } } {\r\n  return Object.keys(entities).reduce((red, typeName) => {\r\n    return Object.assign({}, red, {\r\n      [typeName]: Object.keys(\r\n        entities[typeName],\r\n      ).reduce((reduction, entityId) => {\r\n        return Object.assign({}, reduction, {\r\n          [entityId]: convertsEntityToRecord(\r\n            entities[typeName][entityId],\r\n            typeName,\r\n            graphQLSchema,\r\n            recordsTypes,\r\n          ),\r\n        });\r\n      }, {}),\r\n    });\r\n  }, {});\r\n}\r\n\r\nexport function convertsGraphQLResultToRootEntitiesIDs(\r\n  result: Object,\r\n): { [entityName: string]: Array<string | number> | string | number } {\r\n  return Object.keys(result).reduce((red, key) => {\r\n    if (!Array.isArray(result[key]) && result[key] == null) return red;\r\n    return red.set(\r\n      key,\r\n      Array.isArray(result[key])\r\n        ? result[key].filter(entity => entity != null).map(entity => entity.id)\r\n        : result[key].id,\r\n    );\r\n  }, Map());\r\n}\r\n\r\nexport function convertsGraphQLQueryResultToRecords(\r\n  result: mixed,\r\n  associatedQuery: GraphQLField<any, any>,\r\n  schema: GraphQLSchema,\r\n  recordTypes: RecordTypes,\r\n) {\r\n  if (Array.isArray(result))\r\n    return List(result).map(v =>\r\n      convertsGraphQLQueryResultToRecords(\r\n        v,\r\n        associatedQuery,\r\n        schema,\r\n        recordTypes,\r\n      ),\r\n    );\r\n  else if (typeof result === \"object\" && result !== null) {\r\n    return convertsEntityToRecord(\r\n      result,\r\n      getNamedType(associatedQuery.type).name,\r\n      schema,\r\n      recordTypes,\r\n    );\r\n  } else {\r\n    return result;\r\n  }\r\n}\r\n\r\nexport function convertsGraphQLResultToRecords(\r\n  result: Object,\r\n  schema: GraphQLSchema,\r\n  recordTypes: RecordTypes,\r\n): Object {\r\n  const rootQuery = schema.getQueryType();\r\n  const queries = rootQuery.getFields();\r\n  return Object.keys(result).reduce((red, key) => {\r\n    const field = result[key];\r\n    const associatedQuery = queries[key];\r\n    const convertedField = convertsGraphQLQueryResultToRecords(\r\n      field,\r\n      associatedQuery,\r\n      schema,\r\n      recordTypes,\r\n    );\r\n    return {\r\n      ...red,\r\n      [key]: convertedField,\r\n    };\r\n  }, {});\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/graphqlTypesConverters.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs2\":\"graphql\",\"commonjs\":\"graphql\",\"amd\":\"graphql\"}\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}\n// module id = 2\n// module chunks = 0","\"use babel\";\r\n// @flow\r\n\r\nimport { fromJS, Map, List, Set, Record } from \"immutable\";\r\nimport { normalize, schema } from \"normalizr\";\r\nimport {\r\n  graphQLizr,\r\n  convertsNormalizedEntitiesToRecords,\r\n  convertsGraphQLResultToRootEntitiesIDs,\r\n} from \"./graphqlTypesConverters\";\r\nimport type { GraphQLSchema as GraphQLSchemaType } from \"graphql\";\r\n\r\nexport const QUERY_PROGRESS_NOT_STARTED = \"not started\";\r\nexport const QUERY_PROGRESS_PENDING = \"pending\";\r\nexport const QUERY_PROGRESS_SUCCEED = \"succeed\";\r\nexport const QUERY_PROGRESS_FAILED = \"failed\";\r\n\r\nexport const ResultsRecord = Record({ byQuery: Map(), byEntity: Map() });\r\nexport const QueryRecord = Record({\r\n  results: new ResultsRecord(),\r\n  progress: QUERY_PROGRESS_NOT_STARTED,\r\n});\r\nexport const DataReducerRecord = Record({\r\n  entities: Map(),\r\n  queries: Map(),\r\n});\r\n\r\nexport default function configureReducer(\r\n  normalizrTypes: { [typeName: string]: schema.Entity },\r\n  recordsTypes: { [typeName: string]: Record<*> },\r\n  graphQLSchema: GraphQLSchemaType,\r\n) {\r\n  function warnBadIDRequest(type: string, supposedId: mixed): void {\r\n    console.warn(\r\n      \"You're trying to delete a key of bad type for type\",\r\n      type,\r\n      \":\",\r\n      supposedId,\r\n      \".Keys must be of type number, string or identified object eg: {id: 'key'}. Aborting request\",\r\n    );\r\n  }\r\n\r\n  function getID(data: string | number | { id: string }): ?string {\r\n    if (typeof data === \"string\") return data;\r\n    else if (typeof data === \"number\") return data.toString();\r\n    else if (typeof data === \"object\" && data !== null) {\r\n      return getID(data.id);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return function reducer(\r\n    state: DataReducerRecord = new DataReducerRecord(),\r\n    action: { type: string, payload: Object },\r\n  ) {\r\n    switch (action.type) {\r\n      case \"DATA_RECEIVED\":\r\n        const normalizrModel = Object.keys(\r\n          action.payload.entities,\r\n        ).reduce((red, key) => {\r\n          const type = normalizrTypes[key];\r\n          if (type === undefined)\r\n            throw new Error(\r\n              \"You can't normalize a type which is not an Entity. An Entity is a type with an id attribut. You may have defined a GraphQL root query type with a route that has a type without any id.\",\r\n            );\r\n          return Object.assign({}, red, {\r\n            [key]:\r\n              typeof action.payload.entities[key] == \"object\" &&\r\n              Array.isArray(action.payload.entities[key])\r\n                ? [type]\r\n                : type,\r\n          });\r\n        }, {});\r\n        const normalized = normalize(\r\n          JSON.parse(JSON.stringify(action.payload.entities)),\r\n          normalizrModel,\r\n        );\r\n        return state\r\n          .update(\"entities\", entities =>\r\n            entities.mergeDeepWith(\r\n              (a, b) => (b === undefined ? a : b),\r\n              convertsNormalizedEntitiesToRecords(\r\n                normalized.entities,\r\n                recordsTypes,\r\n                graphQLSchema,\r\n              ),\r\n            ),\r\n          )\r\n          .update(\r\n            \"queries\",\r\n            queries =>\r\n              action.payload.query\r\n                ? queries.set(\r\n                    action.payload.query.request.hash.toString(),\r\n                    new QueryRecord({\r\n                      results: new ResultsRecord({\r\n                        byQuery: convertsGraphQLResultToRootEntitiesIDs(\r\n                          action.payload.query.response.raw,\r\n                        ),\r\n                      }),\r\n                      progress: QUERY_PROGRESS_SUCCEED,\r\n                    }),\r\n                  )\r\n                : queries,\r\n          );\r\n      case \"DATA_REMOVED\":\r\n        return Object.keys(action.payload).reduce((red, key: string) => {\r\n          if (\r\n            typeof action.payload[key] == \"object\" &&\r\n            Array.isArray(action.payload[key])\r\n          ) {\r\n            return action.payload[key].reduce((reduction, value) => {\r\n              const id = getID(value);\r\n              if (id == null) {\r\n                warnBadIDRequest(key, value);\r\n                return reduction;\r\n              } else {\r\n                return reduction.deleteIn([\"entities\", key, id]);\r\n              }\r\n            }, red);\r\n          } else {\r\n            const id = getID(action.payload[key]);\r\n            if (id == null) {\r\n              warnBadIDRequest(key, action.payload[key]);\r\n              return red;\r\n            } else {\r\n              // $FlowFixMe\r\n              return red.deleteIn([\"entities\", key, id]);\r\n            }\r\n          }\r\n        }, state);\r\n      case \"QUERY_STARTED\":\r\n        return state.update(\"queries\", queries =>\r\n          queries.update(\r\n            action.payload.query.request.hash.toString(),\r\n            (query = new QueryRecord()) =>\r\n              query.set(\"progress\", QUERY_PROGRESS_PENDING),\r\n          ),\r\n        );\r\n      case \"QUERY_FAILED\":\r\n        return state.update(\"queries\", queries =>\r\n          queries.update(action.payload.query.request.hash.toString(), query =>\r\n            query.set(\"progress\", QUERY_PROGRESS_FAILED),\r\n          ),\r\n        );\r\n      case \"QUERY_CACHE_BUSTED\":\r\n        return state.update(\"queries\", queries =>\r\n          queries.remove(action.payload.queryID.toString()),\r\n        );\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/reducer.js","// @flow\r\n\r\nexport default class Mutation {\r\n  mutationQL: string;\r\n  variables: { [variableName: string]: mixed };\r\n  onError: () => void;\r\n  onCompleted: () => void;\r\n  operationName: ?string;\r\n\r\n  constructor(\r\n    {\r\n      mutationQL,\r\n      variables = {},\r\n      onError = () => {},\r\n      onCompleted = () => {},\r\n      operationName,\r\n    }: {\r\n      mutationQL: string,\r\n      variables?: { [variableName: string]: mixed },\r\n      onError?: () => void,\r\n      onCompleted?: () => void,\r\n      operationName?: string,\r\n    } = {},\r\n  ) {\r\n    if (mutationQL == null) {\r\n      throw new Error(\r\n        \"mutationQL has to be defined in the params of new Mutation: new Mutation({mutationQL: `mutation ...`})\",\r\n      );\r\n    }\r\n    this.mutationQL = mutationQL;\r\n    this.variables = variables;\r\n    this.onError = onError;\r\n    this.onCompleted = onCompleted;\r\n    this.operationName = operationName;\r\n  }\r\n\r\n  setOperationName(name: string) {\r\n    return new Mutation({\r\n      mutationQL: this.mutationQL,\r\n      variables: this.variables,\r\n      onError: this.onError,\r\n      onCompleted: this.onCompleted,\r\n      operationName: name,\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/Mutation.js","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs2\":\"normalizr\",\"commonjs\":\"normalizr\",\"amd\":\"normalizr\"}\n// module id = 5\n// module chunks = 0","// @flow\r\n\r\nimport { Stack, List } from \"immutable\";\r\nimport {\r\n  TypeInfo,\r\n  GraphQLSchema,\r\n  Kind,\r\n  GraphQLList,\r\n  GraphQLObjectType,\r\n  getNamedType,\r\n  visit,\r\n  visitWithTypeInfo,\r\n  parse,\r\n} from \"graphql\";\r\nimport type { ASTNode, FieldNode } from \"graphql\";\r\nimport { DataReducerRecord } from \"./reducer\";\r\nimport { isEntity } from \"./graphqlTypesConverters\";\r\n\r\nexport function hashString(str: string): number {\r\n  let hash = 0;\r\n  if (str.length == 0) return hash;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const char = str.charCodeAt(i);\r\n    hash = (hash << 5) - hash + char;\r\n    hash = hash & hash; // Convert to 32bit integer\r\n  }\r\n  return hash;\r\n}\r\n\r\nexport function hashMutationQuery(query: string, id: string): number {\r\n  return hashString(`mutation-${id}-${query}`);\r\n}\r\n\r\nexport function generateUUID() {\r\n  let d = new Date().getTime();\r\n  if (\r\n    typeof performance !== \"undefined\" &&\r\n    typeof performance.now === \"function\"\r\n  ) {\r\n    d += performance.now(); //use high-precision timer if available\r\n  }\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n    const r = ((d + Math.random() * 16) % 16) | 0;\r\n    d = Math.floor(d / 16);\r\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\r\n  });\r\n}\r\n\r\nexport class TypeInfoWithValuesComparator extends TypeInfo {\r\n  _value1Stack: Stack<mixed>;\r\n  _value2Stack: Stack<mixed>;\r\n  _reducer1: DataReducerRecord;\r\n  _reducer2: DataReducerRecord;\r\n  _queryHash1: string | number;\r\n  _queryHash2: string | number;\r\n  _shouldBreak: boolean;\r\n\r\n  constructor({\r\n    schema,\r\n    reducer1,\r\n    reducer2,\r\n    queryHash1,\r\n    queryHash2,\r\n  }: {\r\n    schema: GraphQLSchema,\r\n    reducer1: DataReducerRecord,\r\n    reducer2: DataReducerRecord,\r\n    queryHash1: string | number,\r\n    queryHash2: string | number,\r\n  }) {\r\n    super(schema);\r\n    this._value1Stack = Stack();\r\n    this._value2Stack = Stack();\r\n    this._reducer1 = reducer1;\r\n    this._reducer2 = reducer2;\r\n    this._queryHash1 = queryHash1;\r\n    this._queryHash2 = queryHash2;\r\n    this._shouldBreak = false;\r\n  }\r\n\r\n  _getQueryValue(\r\n    node: FieldNode,\r\n    reducer: DataReducerRecord,\r\n    queryHash: string | number,\r\n  ) {\r\n    if (reducer == null || queryHash == null)\r\n      throw new Error(\r\n        \"Trying to determine whether selection of data has to be relaunched, but encounterd an error. Missing dependency on reducer or queryHash\",\r\n      );\r\n    const queryResult = reducer.getIn([\r\n      \"queries\",\r\n      queryHash,\r\n      \"results\",\r\n      \"byQuery\",\r\n      node.alias != null ? node.alias.value : node.name.value,\r\n    ]);\r\n    const currentType = this.getType();\r\n    if (queryResult == null) {\r\n      if (currentType instanceof GraphQLList) return [];\r\n      else return null;\r\n    }\r\n    if (currentType instanceof GraphQLList) {\r\n      const typeName = getNamedType(currentType.ofType).name;\r\n      return queryResult.map(id =>\r\n        reducer.getIn([\"entities\", typeName, id.toString()]),\r\n      );\r\n    } else if (queryResult != null) {\r\n      const namedType = getNamedType(currentType);\r\n      if (namedType != undefined) {\r\n        return reducer.getIn([\r\n          \"entities\",\r\n          namedType.name,\r\n          queryResult.toString(),\r\n        ]);\r\n      } else {\r\n        console.error(\"CurrentType:\", currentType);\r\n        throw new Error(\r\n          \"Weird behavior has been encountered with an unnamed type as current type\",\r\n        );\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  _getEntityValue(\r\n    node: FieldNode,\r\n    reducer: DataReducerRecord,\r\n    lastValue: mixed,\r\n  ) {\r\n    if (\r\n      node.selectionSet != null &&\r\n      typeof lastValue === \"object\" &&\r\n      lastValue != null\r\n    ) {\r\n      const fieldName = node.alias ? node.alias.value : node.name.value;\r\n      if (Array.isArray(lastValue) || List.isList(lastValue))\r\n        // $FlowFixMe\r\n        return lastValue.map(v => this._getEntityValue(node, reducer, v));\r\n      const fieldValue = lastValue[fieldName];\r\n      const namedType = getNamedType(this.getType());\r\n      if (namedType && isEntity(namedType) === false) {\r\n        return fieldValue;\r\n      }\r\n      if (\r\n        this.getType() instanceof GraphQLList &&\r\n        fieldValue != null &&\r\n        (Array.isArray(fieldValue) || List.isList(fieldValue))\r\n      ) {\r\n        if (namedType) {\r\n          const entityName = namedType.name;\r\n          // $FlowFixMe\r\n          return fieldValue.map(id =>\r\n            reducer.getIn([\"entities\", entityName, id.toString()]),\r\n          );\r\n        } else {\r\n          console.error(\r\n            \"Weird state encountered trying to get the named type of\",\r\n            this.getType(),\r\n            \"at node\",\r\n            node,\r\n            \"knowing that \",\r\n            fieldValue,\r\n            \"is an Array or a Immutable.List\",\r\n          );\r\n          throw new Error(\"Aborting.\");\r\n        }\r\n      } else if (fieldValue != null) {\r\n        if (namedType) {\r\n          const entityName = namedType.name;\r\n          // $FlowFixMe\r\n          return reducer.getIn([\"entities\", entityName, fieldValue.toString()]);\r\n        } else {\r\n          console.error(\r\n            \"Weird state encountered trying to get the named type of\",\r\n            this.getType(),\r\n            \"at node\",\r\n            node,\r\n            \"knowing that \",\r\n            fieldValue,\r\n            \"is an Object or a Immutable.Record\",\r\n          );\r\n          throw new Error(\"Aborting.\");\r\n        }\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return lastValue;\r\n    }\r\n  }\r\n\r\n  _haveChanged(value1: mixed, value2: mixed): boolean {\r\n    if (typeof value1 !== typeof value2) return true;\r\n    if (Array.isArray(value1) || List.isList(value1)) {\r\n      if (Array.isArray(value2) === true || List.isList(value2) === true) {\r\n        // $FlowFixMe\r\n        return value1.some((v1: mixed, i: number) => {\r\n          return this._haveChanged(\r\n            v1,\r\n            // $FlowFixMe\r\n            Array.isArray(value2) ? value2[i] : value2.get(i),\r\n          );\r\n        });\r\n      } else return true;\r\n    } else if (typeof value1 === \"object\" && value1 !== null) {\r\n      if (value2 === null) return true;\r\n      return value1 !== value2;\r\n    } else {\r\n      return value1 !== value2;\r\n    }\r\n  }\r\n\r\n  enter(node: ASTNode) {\r\n    super.enter(node);\r\n    if (node.kind === Kind.FIELD) {\r\n      let value1;\r\n      let value2;\r\n      if (this.getParentType() === this._schema.getQueryType()) {\r\n        value1 = this._getQueryValue(node, this._reducer1, this._queryHash1);\r\n        this._value1Stack = this._value1Stack.unshift(value1);\r\n        value2 = this._getQueryValue(node, this._reducer2, this._queryHash2);\r\n        this._value2Stack = this._value2Stack.push(value2);\r\n      } else {\r\n        value1 = this._getEntityValue(\r\n          node,\r\n          this._reducer1,\r\n          this._value1Stack.peek(),\r\n        );\r\n        this._value1Stack = this._value1Stack.push(value1);\r\n        value2 = this._getEntityValue(\r\n          node,\r\n          this._reducer2,\r\n          this._value2Stack.peek(),\r\n        );\r\n        this._value2Stack = this._value2Stack.push(value2);\r\n      }\r\n      if (this._shouldBreak === false) {\r\n        this._shouldBreak = this._haveChanged(value1, value2);\r\n      }\r\n    }\r\n  }\r\n\r\n  leave(node: ASTNode) {\r\n    if (node.kind === Kind.FIELD) {\r\n      this._value1Stack = this._value1Stack.pop();\r\n      this._value2Stack = this._value2Stack.pop();\r\n    }\r\n    super.leave(node);\r\n  }\r\n\r\n  getValue1(): mixed {\r\n    return this._value1Stack.peek();\r\n  }\r\n\r\n  getValue2(): mixed {\r\n    return this._value2Stack.peek();\r\n  }\r\n\r\n  shouldBreak(): boolean {\r\n    return this._shouldBreak;\r\n  }\r\n}\r\n\r\nexport function selectedDataHaveChanged({\r\n  query,\r\n  schema,\r\n  queryHash,\r\n  reducer1,\r\n  reducer2,\r\n}: {\r\n  query: string,\r\n  schema: GraphQLSchema,\r\n  queryHash: string | number,\r\n  reducer1: DataReducerRecord,\r\n  reducer2: DataReducerRecord,\r\n}): boolean {\r\n  const typeInfo = new TypeInfoWithValuesComparator({\r\n    schema,\r\n    reducer1,\r\n    reducer2,\r\n    queryHash1: queryHash,\r\n    queryHash2: queryHash,\r\n  });\r\n  let hasChanged = false;\r\n  visit(\r\n    parse(query),\r\n    visitWithTypeInfo(typeInfo, {\r\n      [Kind.FIELD]: {\r\n        enter(node) {\r\n          hasChanged = typeInfo.shouldBreak();\r\n        },\r\n      },\r\n    }),\r\n  );\r\n  return hasChanged;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/utils.js","// @flow\r\n\r\nexport { configure } from \"./configurer\";\r\nexport { default as Mutation } from \"./Mutation\";\r\nexport {\r\n  QUERY_PROGRESS_NOT_STARTED,\r\n  QUERY_PROGRESS_PENDING,\r\n  QUERY_PROGRESS_SUCCEED,\r\n  QUERY_PROGRESS_FAILED,\r\n} from \"./reducer\";\r\nexport { graphQLizr, graphQLRecordr } from \"./graphqlTypesConverters\";\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/index.js","\"use babel\";\r\n// @flow\r\nimport { schema } from \"normalizr\";\r\nimport { buildSchema } from \"graphql\";\r\nimport type { GraphQLSchema } from \"graphql\";\r\nimport configureMiddleware from \"./middleware\";\r\nimport configureReducer from \"./reducer\";\r\nimport configureActions from \"./actions\";\r\nimport configureConnecter from \"./hoc\";\r\nimport { graphQLizr, graphQLRecordr } from \"./graphqlTypesConverters\";\r\nimport { convertsTypesSchemaToSelectorSchema } from \"./selectors\";\r\n\r\nexport function configure(\r\n  graphQLSchema: GraphQLSchema | string,\r\n  context?: mixed,\r\n  rootValue?: any,\r\n  { __debug = false }: { __debug?: boolean } = {},\r\n) {\r\n  const graphQLCompiledSchema =\r\n    typeof graphQLSchema === \"string\"\r\n      ? buildSchema(graphQLSchema)\r\n      : graphQLSchema;\r\n  const selectorSchema = convertsTypesSchemaToSelectorSchema(\r\n    graphQLCompiledSchema,\r\n    { __debug },\r\n  );\r\n  const normalizrModel = graphQLizr(graphQLCompiledSchema);\r\n  const recordsModel = graphQLRecordr(graphQLCompiledSchema);\r\n  const actions = configureActions();\r\n  const middleware = configureMiddleware(\r\n    graphQLCompiledSchema,\r\n    actions,\r\n    normalizrModel,\r\n    context,\r\n    rootValue,\r\n  );\r\n  const reducer = configureReducer(\r\n    normalizrModel.entities,\r\n    recordsModel,\r\n    graphQLCompiledSchema,\r\n  );\r\n  const { GraphQLConnecter, DataFetcher, DataHandlers } = configureConnecter({\r\n    selectorSchema,\r\n    typesSchema: graphQLCompiledSchema,\r\n    recordTypes: recordsModel,\r\n    actions,\r\n  });\r\n  return {\r\n    actions,\r\n    middleware,\r\n    reducer,\r\n    normalizrModel,\r\n    recordsModel,\r\n    selectorSchema,\r\n    GraphQLConnecter,\r\n    DataFetcher,\r\n    DataHandlers,\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/configurer.js","// @flow\r\n\r\nimport type { Middleware, MiddlewareAPI } from \"redux\";\r\nimport type { GraphQLSchema } from \"graphql\";\r\nimport { hashString, hashMutationQuery } from \"./utils\";\r\nimport { graphql } from \"graphql\";\r\nimport { getDataFromResponse } from \"./graphqlTypesConverters\";\r\nimport Mutation from \"./Mutation\";\r\nimport Query from \"./Query\";\r\n\r\nexport default function(\r\n  schema: GraphQLSchema,\r\n  actions: { [actionName: string]: (...params: any) => Object },\r\n  normalizrModel: any,\r\n  context?: any,\r\n  rootValue?: any,\r\n): Middleware<any, any> {\r\n  return (store: MiddlewareAPI<any, any>) => (\r\n    next: (action: Object) => void,\r\n  ) => (action: Object) => {\r\n    if (\r\n      (action.type === \"GRAPHQL_FETCH\" || action.type === \"GRAPHQL_MUTATION\") &&\r\n      action.graphql\r\n    ) {\r\n      if (action.type === \"GRAPHQL_FETCH\") {\r\n        const query =\r\n          action.payload instanceof Query\r\n            ? action.payload.queryQL\r\n            : action.payload;\r\n        const hash = hashString(query);\r\n        const request = {\r\n          ql: query,\r\n          hash,\r\n        };\r\n\r\n        store.dispatch(actions.queryStarted({ request }));\r\n        const variableValues =\r\n          action.payload instanceof Query ? action.payload.variables : {};\r\n        const operationName =\r\n          action.payload instanceof Query\r\n            ? action.payload.operationName\r\n            : undefined;\r\n        graphql(\r\n          schema,\r\n          query,\r\n          rootValue,\r\n          {\r\n            store,\r\n            dependencies: context,\r\n          },\r\n          variableValues,\r\n          operationName,\r\n        ).then(result => {\r\n          if (result.errors === undefined && result.data) {\r\n            store.dispatch(\r\n              actions.packageData(\r\n                getDataFromResponse(normalizrModel.converters, result.data),\r\n                {\r\n                  request,\r\n                  response: {\r\n                    raw: result.data,\r\n                  },\r\n                },\r\n              ),\r\n            );\r\n          } else {\r\n            console.error(\r\n              \"GraphQL query\",\r\n              query,\r\n              \"has failed.\\n\",\r\n              \"errors:\",\r\n              result.errors,\r\n            );\r\n            store.dispatch(actions.queryFailed({ request }, result.errors));\r\n          }\r\n        });\r\n      } else {\r\n        const mutation: Mutation = action.payload.mutation;\r\n        const hash = action.payload.queryID;\r\n        const request = {\r\n          ql: mutation.mutationQL,\r\n          hash,\r\n        };\r\n        store.dispatch(actions.queryStarted({ request }));\r\n        graphql(\r\n          schema,\r\n          mutation.mutationQL,\r\n          rootValue,\r\n          {\r\n            store,\r\n            dependencies: context,\r\n          },\r\n          mutation.variables,\r\n          mutation.operationName,\r\n        ).then(result => {\r\n          if (result.errors === undefined && result.data) {\r\n            store.dispatch(\r\n              actions.packageData(\r\n                getDataFromResponse(normalizrModel.converters, result.data),\r\n                {\r\n                  request,\r\n                  response: {\r\n                    raw: result.data,\r\n                  },\r\n                },\r\n              ),\r\n            );\r\n            mutation.onCompleted();\r\n          } else {\r\n            console.error(\r\n              \"GraphQL mutation\",\r\n              mutation.mutationQL,\r\n              \"has failed.\\n\",\r\n              \"errors:\",\r\n              result.errors,\r\n            );\r\n            store.dispatch(actions.queryFailed({ request }, result.errors));\r\n            mutation.onError();\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      return next(action);\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/middleware.js","// @flow\n\nexport default class Query {\n  queryQL: string;\n  variables: { [variableName: string]: mixed };\n  onError: () => void;\n  onCompleted: () => void;\n  operationName: ?string;\n\n  constructor(\n    {\n      queryQL,\n      variables = {},\n      onError = () => {},\n      onCompleted = () => {},\n      operationName,\n    }: {\n      queryQL: string,\n      variables?: { [variableName: string]: mixed },\n      onError?: () => void,\n      onCompleted?: () => void,\n      operationName?: string,\n    } = {},\n  ) {\n    if (queryQL == null) {\n      throw new Error(\n        \"queryQL has to be defined in the params of new Query: new Query({queryQL: `query ...`})\",\n      );\n    }\n    this.queryQL = queryQL;\n    this.variables = variables;\n    this.onError = onError;\n    this.onCompleted = onCompleted;\n    this.operationName = operationName;\n  }\n\n  setOperationName(name: string) {\n    return new Query({\n      queryQL: this.queryQL,\n      variables: this.variables,\n      onError: this.onError,\n      onCompleted: this.onCompleted,\n      operationName: name,\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/Query.js","\"use babel\";\r\n// @flow\r\n\r\nimport Mutation from \"./Mutation\";\r\n\r\ntype QueryRequest = {\r\n  ql: string,\r\n  hash: string | number,\r\n};\r\n\r\ntype QueryDetails = {\r\n  request: QueryRequest,\r\n  response?: {\r\n    raw: Object,\r\n  },\r\n};\r\n\r\nexport default function configureActions() {\r\n  return {\r\n    mutateData(mutation: Mutation, queryID: string) {\r\n      return {\r\n        type: \"GRAPHQL_MUTATION\",\r\n        graphql: true,\r\n        payload: {\r\n          mutation,\r\n          queryID,\r\n        },\r\n      };\r\n    },\r\n    fetchData(needs: string) {\r\n      return {\r\n        type: \"GRAPHQL_FETCH\",\r\n        graphql: true,\r\n        payload: needs,\r\n      };\r\n    },\r\n    bustQueryCache(queryID: string) {\r\n      return {\r\n        type: \"QUERY_CACHE_BUSTED\",\r\n        payload: {\r\n          queryID,\r\n        },\r\n      };\r\n    },\r\n    packageData(data: Object, query?: QueryDetails) {\r\n      return {\r\n        type: \"DATA_RECEIVED\",\r\n        payload: {\r\n          entities: data,\r\n          query,\r\n        },\r\n      };\r\n    },\r\n    queryStarted(query: QueryDetails) {\r\n      return {\r\n        type: \"QUERY_STARTED\",\r\n        payload: {\r\n          query,\r\n        },\r\n      };\r\n    },\r\n    removeData(identifiers: {\r\n      [key: string]:\r\n        | number\r\n        | string\r\n        | { id: string | number }\r\n        | Array<number | string | { id: string | number }>,\r\n    }) {\r\n      return {\r\n        type: \"DATA_REMOVED\",\r\n        payload: identifiers,\r\n      };\r\n    },\r\n    queryFailed(query: QueryDetails, errors: Array<Object>) {\r\n      return {\r\n        type: \"QUERY_FAILED\",\r\n        payload: {\r\n          query,\r\n          errors,\r\n        },\r\n      };\r\n    },\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/actions.js","\"use babel\";\r\n// @flow\r\n\r\nimport React from \"react\";\r\nimport { graphql, GraphQLSchema, getNamedType } from \"graphql\";\r\nimport { fromJS, List } from \"immutable\";\r\nimport { convertsGraphQLResultToRecords } from \"./graphqlTypesConverters\";\r\nimport {\r\n  hashString,\r\n  selectedDataHaveChanged,\r\n  hashMutationQuery,\r\n  generateUUID,\r\n} from \"./utils\";\r\nimport { QUERY_PROGRESS_NOT_STARTED, QueryRecord } from \"./reducer\";\r\nimport type { Record } from \"immutable\";\r\nimport Mutation from \"./Mutation\";\r\n\r\ntype Props = Object;\r\n\r\ntype State = {\r\n  selectedData: ?Object,\r\n};\r\n\r\nexport default function configureConnecter(\r\n  {\r\n    typesSchema,\r\n    selectorSchema,\r\n    recordTypes,\r\n    reducerName = \"data\",\r\n    actions,\r\n  }: {\r\n    typesSchema: GraphQLSchema,\r\n    selectorSchema: GraphQLSchema,\r\n    recordTypes: { [typeName: string]: Record<any> },\r\n    reducerName?: string,\r\n    actions: { [actionName: string]: (...params: Array<any>) => Object },\r\n  } = {},\r\n) {\r\n  if (typesSchema === undefined) {\r\n    throw new Error(\r\n      \"You have to define a type schema, type schema is currently \" +\r\n        typesSchema,\r\n    );\r\n  }\r\n  if (selectorSchema === undefined) {\r\n    throw new Error(\r\n      \"You have to define a selector schema, selector schema is currently \" +\r\n        selectorSchema,\r\n    );\r\n  }\r\n\r\n  function DataHandlers({\r\n    mapMutationsToProps,\r\n  }: {\r\n    mapMutationsToProps: (\r\n      props: Props,\r\n    ) => {\r\n      [propName: string]: (...Array<mixed>) => Mutation,\r\n    },\r\n  }) {\r\n    return function DataHandlersHOC(\r\n      Comp: Class<React.Component<any, any, any>>,\r\n    ): Class<React.Component<any, any, any>> {\r\n      return class DataHandlersContainer extends React.Component<\r\n        any,\r\n        any,\r\n        any,\r\n      > {\r\n        id: string;\r\n        bustQueryCache: (handlerName: string) => void;\r\n\r\n        constructor(props) {\r\n          super(props);\r\n\r\n          this.id = props.__uniqueID || generateUUID();\r\n          this.bustQueryCache = this.bustQueryCache.bind(this);\r\n        }\r\n\r\n        getReducer(props) {\r\n          return props[reducerName];\r\n        }\r\n        getLinkedQueries(props) {\r\n          const reducer = this.getReducer(props);\r\n          const queries = reducer.queries;\r\n          const mutationsProps = mapMutationsToProps(props);\r\n          const names = Object.keys(mutationsProps);\r\n          const linkedQueries = names.map(name => ({\r\n            name,\r\n            query: queries.get(hashMutationQuery(name, this.id).toString()),\r\n          }));\r\n          return linkedQueries;\r\n        }\r\n\r\n        getLinkedQueryStates(props) {\r\n          const linkedQueries = this.getLinkedQueries(\r\n            props,\r\n          ).reduce((red, infos) => {\r\n            const propName = `${infos.name}QueryProgress`;\r\n            return {\r\n              ...red,\r\n              [propName]: infos.query\r\n                ? infos.query.progress\r\n                : QUERY_PROGRESS_NOT_STARTED,\r\n            };\r\n          }, {});\r\n          return linkedQueries;\r\n        }\r\n\r\n        componentWillUnmount() {\r\n          this.getLinkedQueries(this.props).forEach(info => {\r\n            this.bustQueryCache(info.name);\r\n          });\r\n        }\r\n\r\n        bustQueryCache(handlerName: string) {\r\n          this.props.dispatch(\r\n            actions.bustQueryCache(hashMutationQuery(handlerName, this.id)),\r\n          );\r\n        }\r\n\r\n        render() {\r\n          const reducer = this.getReducer(this.props);\r\n          if (!reducer)\r\n            throw new Error(\r\n              `DataHandlers must get the cache reducer as a props named '${reducerName}'`,\r\n            );\r\n\r\n          if (!this.props.dispatch)\r\n            throw new Error(\r\n              \"DataHandlers must get the dispatch function as props\",\r\n            );\r\n\r\n          const mutationsMap = mapMutationsToProps(this.props);\r\n          const handlers = Object.keys(mutationsMap).reduce((red, key) => {\r\n            if (typeof mutationsMap[key] !== \"function\") {\r\n              throw new Error(\r\n                `You must pass a function as handler of mapMutationsToProps, handler ${key} isn't a function`,\r\n              );\r\n            }\r\n            return {\r\n              ...red,\r\n              [key]: (...args) => {\r\n                const mutation = mutationsMap[key](...args);\r\n                if (mutation instanceof Mutation) {\r\n                  const action = actions.mutateData(\r\n                    mutation,\r\n                    hashMutationQuery(key, this.id),\r\n                  );\r\n                  this.props.dispatch(action);\r\n                } else if (mutation) {\r\n                  console.error(\r\n                    \"You have to return a Mutation from the handler defined in mapMutationsToProps,\",\r\n                    key,\r\n                    \"handler doesn't return a Mutation.\",\r\n                  );\r\n                } else {\r\n                  return;\r\n                }\r\n              },\r\n            };\r\n          }, {});\r\n          const queries = this.getLinkedQueryStates(this.props);\r\n          return (\r\n            <Comp\r\n              {...this.props}\r\n              {...handlers}\r\n              {...queries}\r\n              bustQueryCache={this.bustQueryCache}\r\n            />\r\n          );\r\n        }\r\n      };\r\n    };\r\n  }\r\n\r\n  function DataFetcher({\r\n    mapPropsToNeeds,\r\n    mapCacheToProps = () => ({}),\r\n    shouldRefetch = () => false,\r\n    queryProgressPropName = \"queryProgress\",\r\n  }: {\r\n    mapPropsToNeeds: (props: Props) => string,\r\n    mapCacheToProps?: (\r\n      cache: any,\r\n      props: Props,\r\n      selectedData: Object,\r\n    ) => Object,\r\n    shouldRefetch?: (props: Props, prevProps: Props) => boolean,\r\n    queryProgressPropName?: string,\r\n  }) {\r\n    return GraphQLConnecter(mapPropsToNeeds, mapCacheToProps, shouldRefetch, {\r\n      queryProgressPropName,\r\n    });\r\n  }\r\n\r\n  function GraphQLConnecter(\r\n    mapPropsToNeeds: (props: Props) => string,\r\n    mapCacheToProps: (\r\n      cache: any,\r\n      props: Props,\r\n      selectedData: Object,\r\n    ) => any = () => ({}),\r\n    shouldRefetch: (props: Props, prevProps: Props) => boolean = () => false,\r\n    {\r\n      queryProgressPropName = \"queryProgress\",\r\n    }: { queryProgressPropName?: string } = {},\r\n  ) {\r\n    return function(\r\n      WrappedComponent: Class<React.Component<any, any, any>>,\r\n    ): Class<React.Component<any, any, any>> {\r\n      return class GraphQLContainer extends React.Component<any, Props, any> {\r\n        props: Props;\r\n\r\n        constructor(props) {\r\n          super(props);\r\n\r\n          this.state = {\r\n            selectedData: {},\r\n          };\r\n        }\r\n\r\n        componentDidMount() {\r\n          this.getNeeds();\r\n          this.selectData(this.props);\r\n        }\r\n\r\n        getReducer(props) {\r\n          return props[reducerName];\r\n        }\r\n\r\n        mustReselectData(props, nextProps) {\r\n          const currentReducer = this.getReducer(props);\r\n          const nextReducer = this.getReducer(nextProps);\r\n          const currentNeeds = mapPropsToNeeds(props);\r\n          const nextNeeds = mapPropsToNeeds(nextProps);\r\n          if (nextNeeds !== currentNeeds) return true;\r\n          const hash =\r\n            currentNeeds != null ? hashString(currentNeeds).toString() : null;\r\n          if (hash != null) {\r\n            const nextQuery = nextReducer.getIn([\"queries\", hash]);\r\n            const currentQuery = currentReducer.getIn([\"queries\", hash]);\r\n            if (nextQuery !== currentQuery) return true;\r\n            else if (nextReducer.entities !== currentReducer.entities) {\r\n              return selectedDataHaveChanged({\r\n                schema: typesSchema,\r\n                query: currentNeeds,\r\n                queryHash: hash,\r\n                reducer1: currentReducer,\r\n                reducer2: nextReducer,\r\n              });\r\n            } else {\r\n              return false;\r\n            }\r\n          } else {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        componentWillReceiveProps(nextProps: Props) {\r\n          if (this.mustReselectData(this.props, nextProps)) {\r\n            this.selectData(nextProps);\r\n          }\r\n        }\r\n\r\n        componentDidUpdate(prevProps: Props) {\r\n          if (\r\n            mapPropsToNeeds(this.props) != mapPropsToNeeds(prevProps) ||\r\n            shouldRefetch(this.props, prevProps)\r\n          ) {\r\n            this.getNeeds();\r\n          }\r\n        }\r\n\r\n        warnAgainstEmptyQuery() {\r\n          console.warn(\r\n            \"You have defined as needs {}, which is a wrong graphql query. If you want to avoid fetching, return null instead\",\r\n          );\r\n        }\r\n\r\n        selectData(props: Object) {\r\n          const query = mapPropsToNeeds(props);\r\n          const reducer = this.getReducer(props);\r\n          if (query === \"{}\" || query === \"{ }\") {\r\n            this.warnAgainstEmptyQuery();\r\n            this.resetSelection();\r\n          } else if (query != null) {\r\n            const hash = hashString(query).toString();\r\n            if (props.__debug) {\r\n              console.log(\r\n                \"SELECTING data for hash\",\r\n                hash,\r\n                \" -- date:\",\r\n                Date.now(),\r\n              );\r\n            }\r\n            graphql(selectorSchema, query, null, {\r\n              db: reducer,\r\n              queryHash: hash,\r\n            }).then(result => {\r\n              if (result.errors !== undefined || result.data == null) {\r\n                console.error(\r\n                  \"GraphQLConnecter: Impossible to select data. needs:\",\r\n                  query,\r\n                  \"errors:\",\r\n                  result.errors,\r\n                );\r\n              } else {\r\n                if (props.__debug) {\r\n                  console.log(\r\n                    \"SELECTED data\",\r\n                    result.data,\r\n                    \"for hash\",\r\n                    hash,\r\n                    \"with reducer\",\r\n                    reducer,\r\n                    \" -- date:\",\r\n                    Date.now(),\r\n                  );\r\n                }\r\n                const convertedData = convertsGraphQLResultToRecords(\r\n                  result.data,\r\n                  typesSchema,\r\n                  recordTypes,\r\n                );\r\n                const reducerChanged = this.getReducer(props) !== reducer;\r\n                if (props.__debug) {\r\n                  console.log(\r\n                    \"CONVERTED data\",\r\n                    result.data,\r\n                    \"into\",\r\n                    convertedData,\r\n                    \"for hash\",\r\n                    \"with reducer\",\r\n                    reducer,\r\n                    reducerChanged ? \"but reducer has changed to\" : \"\",\r\n                    reducerChanged ? this.getReducer(props) : \"\",\r\n                    reducerChanged ? \"relaunching selection\" : \"\",\r\n                  );\r\n                }\r\n                if (reducerChanged) {\r\n                  this.selectData(props);\r\n                } else {\r\n                  this.setState(state => ({ selectedData: convertedData }));\r\n                }\r\n              }\r\n            });\r\n          } else {\r\n            this.resetSelection();\r\n          }\r\n        }\r\n\r\n        resetSelection() {\r\n          this.setState(state => ({ selectedData: {} }));\r\n        }\r\n\r\n        getNeeds() {\r\n          const needs = mapPropsToNeeds(this.props);\r\n          if (needs === \"{}\" || needs === \"{ }\") {\r\n            this.warnAgainstEmptyQuery();\r\n          } else if (needs != null) {\r\n            this.props.dispatch(actions.fetchData(needs));\r\n          }\r\n        }\r\n\r\n        render() {\r\n          const reducer = this.getReducer(this.props);\r\n          if (!reducer)\r\n            throw new Error(\r\n              `GraphQLConnecter must get the cache reducer as a props named '${reducerName}'`,\r\n            );\r\n          if (!this.props.dispatch)\r\n            throw new Error(\r\n              \"GraphQLConnecter must get the dispatch function as props\",\r\n            );\r\n          const needs = mapPropsToNeeds(this.props);\r\n          const queryProgress =\r\n            needs !== null\r\n              ? reducer.getIn(\r\n                  [\"queries\", hashString(needs).toString(), \"progress\"],\r\n                  QUERY_PROGRESS_NOT_STARTED,\r\n                )\r\n              : QUERY_PROGRESS_NOT_STARTED;\r\n          return (\r\n            <WrappedComponent\r\n              {...this.props}\r\n              {...this.state.selectedData}\r\n              {...mapCacheToProps(\r\n                this.props.data,\r\n                this.props,\r\n                this.state.selectedData,\r\n              )}\r\n              {...{\r\n                [queryProgressPropName]: queryProgress,\r\n              }}\r\n              refetch={() => this.getNeeds()}\r\n            />\r\n          );\r\n        }\r\n      };\r\n    };\r\n  }\r\n  return { GraphQLConnecter, DataHandlers, DataFetcher };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/hoc.js","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n// module id = 13\n// module chunks = 0","// @flow\n\nimport type {\n  GraphQLOutputType,\n  GraphQLType,\n  GraphQLField,\n  GraphQLNamedType,\n  GraphQLArgument,\n  GraphQLArgumentConfig,\n  GraphQLFieldConfigMap,\n  GraphQLFieldConfig,\n  GraphQLResolveInfo,\n} from \"graphql\";\nimport { Map } from \"immutable\";\nimport {\n  printSchema,\n  graphql,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLList,\n  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLEnumType,\n  GraphQLUnionType,\n  getNamedType,\n} from \"graphql\";\nimport { isEntity } from \"./graphqlTypesConverters\";\n\ntype TypeMap = { [typeName: string]: GraphQLNamedType };\n\nfunction getResolveQuery(entityName: string) {\n  return function resolveQuery(\n    parent,\n    args,\n    context,\n    { rootValue, fieldName, returnType, path }: GraphQLResolveInfo,\n  ) {\n    if (context == null || context.db == null || context.queryHash == null)\n      throw new Error(\n        \"You have to pass database (entities and results) as db and graphql query as queryHash in contextValue\",\n      );\n    const queryResult = context.db.getIn([\n      \"queries\",\n      context.queryHash,\n      \"results\",\n      \"byQuery\",\n      path !== undefined ? path.key : fieldName,\n    ]);\n    if (queryResult == null) {\n      if (returnType instanceof GraphQLList) return [];\n      else return null;\n    }\n    if (returnType instanceof GraphQLList) {\n      const typeName = getEntityTypeNameFromSelectorTypeName(\n        getNamedType(returnType.ofType).name,\n      );\n      return queryResult.map(id =>\n        context.db.getIn([\"entities\", typeName, id.toString()]),\n      );\n    } else if (queryResult != null) {\n      return context.db.getIn([\n        \"entities\",\n        getEntityTypeNameFromSelectorTypeName(getNamedType(returnType).name),\n        queryResult.toString(),\n      ]);\n    } else {\n      return null;\n    }\n  };\n}\n\nfunction getResolveEntity(entityName: string) {\n  return function resolveEntity(\n    parent,\n    args,\n    context,\n    { rootValue, fieldName, returnType }: GraphQLResolveInfo = {},\n  ) {\n    const fieldValue = parent[fieldName];\n    if (returnType instanceof GraphQLList && fieldValue != null) {\n      return fieldValue.map(id =>\n        context.db.getIn([\"entities\", entityName, id.toString()]),\n      );\n    } else if (fieldValue != null) {\n      return context.db.getIn([\"entities\", entityName, fieldValue.toString()]);\n    } else {\n      return null;\n    }\n  };\n}\n\nfunction getSelectorTypeName(name: string): string {\n  return `${name}Selector`;\n}\n\nfunction getEntityTypeNameFromSelectorTypeName(name: string): string {\n  return name.substring(0, name.length - 8);\n}\n\nfunction getSelectorTypeFromType(\n  type: GraphQLOutputType,\n  typesMap: TypeMap,\n): GraphQLOutputType {\n  if (type instanceof GraphQLList)\n    return new GraphQLList(getSelectorTypeFromType(type.ofType, typesMap));\n  else if (type instanceof GraphQLObjectType) {\n    const typeName = getSelectorTypeName(getNamedType(type).name);\n    if (typesMap[typeName] == null) {\n      throw new Error(\n        \"Something went wrong in schema conversions. Trying to access \" +\n          typeName +\n          \" type is impossible in Selectors Schema TypeMap\",\n      );\n    }\n    // $FlowFixMe\n    return typesMap[typeName];\n  } else {\n    return type;\n  }\n}\n\nfunction convertsArgsArrayToArgsMap(\n  args: Array<GraphQLArgument>,\n): { [argName: string]: GraphQLArgumentConfig } {\n  return args.reduce(\n    (red, arg): { [argName: string]: GraphQLArgumentConfig } => ({\n      ...red,\n      [arg.name]: arg,\n    }),\n    {},\n  );\n}\n\nexport function convertsFieldToSelectorField(\n  query: GraphQLField<any, any>,\n  typesMap: TypeMap,\n  type: \"entity\" | \"query\" | \"scalar\",\n): GraphQLFieldConfig<any, any> {\n  let resolver;\n  let name: string;\n  switch (type) {\n    case \"entity\":\n      name = getSelectorTypeName(query.name);\n      resolver = getResolveEntity(getNamedType(query.type).name);\n      break;\n    case \"query\":\n      name = getSelectorTypeName(query.name);\n      resolver = getResolveQuery(getNamedType(query.type).name);\n      break;\n    default:\n      name = query.name;\n  }\n  return {\n    description: query.description,\n    args: convertsArgsArrayToArgsMap(query.args),\n    type: getSelectorTypeFromType(query.type, typesMap),\n    resolve: resolver,\n  };\n}\n\nexport function convertsTypeToSelectorType(\n  type: GraphQLObjectType,\n  typeMap: TypeMap,\n): GraphQLOutputType {\n  const selectorName = getSelectorTypeName(type.name);\n  return new GraphQLObjectType({\n    name: selectorName,\n    fields: () =>\n      Object.keys(type.getFields()).reduce((red, key) => {\n        return {\n          ...red,\n          [key]: isEntity(getNamedType(type.getFields()[key].type))\n            ? convertsFieldToSelectorField(\n                type.getFields()[key],\n                typeMap,\n                \"entity\",\n              )\n            : convertsFieldToSelectorField(\n                type.getFields()[key],\n                typeMap,\n                \"scalar\",\n              ),\n        };\n      }, {}),\n  });\n}\n\nexport function convertsTypeMapToSelectorTypeMap(typeMap: TypeMap): TypeMap {\n  let newTypeMap = {};\n  Object.keys(typeMap).forEach(key => {\n    const type = typeMap[key];\n    if (\n      /*isEntity(type) === true &&*/ type instanceof GraphQLObjectType &&\n      !key.startsWith(\"__\")\n    ) {\n      newTypeMap[getSelectorTypeName(key)] = convertsTypeToSelectorType(\n        type,\n        newTypeMap,\n      );\n    } else {\n      newTypeMap[key] = type;\n    }\n  });\n  return newTypeMap;\n}\n\nexport function convertsRootQueryToSelectorRootQuery(\n  rootQuery: GraphQLObjectType,\n  selectorTypeMap: TypeMap,\n): GraphQLObjectType {\n  return new GraphQLObjectType({\n    name: \"SelectorsRootQueryType\",\n    fields: Object.keys(rootQuery.getFields()).reduce((red, key) => {\n      return {\n        ...red,\n        [key]: convertsFieldToSelectorField(\n          rootQuery.getFields()[key],\n          selectorTypeMap,\n          \"query\",\n        ),\n      };\n    }, {}),\n  });\n}\n\nexport function convertsTypesSchemaToSelectorSchema(\n  schema: GraphQLSchema,\n  {\n    markers = [\"id\"],\n    __debug = false,\n  }: { markers?: Array<string>, __debug?: boolean } = {},\n): GraphQLSchema {\n  const typesMap = schema.getTypeMap();\n  const selectorTypesMap = convertsTypeMapToSelectorTypeMap(typesMap);\n  if (__debug) {\n    console.log(\n      \"DataModel TypeMap:\",\n      typesMap,\n      \"\\nSelector TypeMap:\",\n      selectorTypesMap,\n    );\n  }\n  const typesQuery = schema.getQueryType();\n  const selectorTypesQuery = convertsRootQueryToSelectorRootQuery(\n    typesQuery,\n    selectorTypesMap,\n  );\n  const selectorSchema = new GraphQLSchema({\n    query: selectorTypesQuery,\n  });\n  return selectorSchema;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/selectors.js"],"sourceRoot":""}