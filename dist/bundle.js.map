{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap ac2c2db4a830cd2770ce","webpack:///./lib/graphqlTypesConverters.js","webpack:///external {\"commonjs2\":\"graphql\",\"commonjs\":\"graphql\",\"amd\":\"graphql\"}","webpack:///external {\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}","webpack:///external {\"commonjs2\":\"normalizr\",\"commonjs\":\"normalizr\",\"amd\":\"normalizr\"}","webpack:///./lib/utils.js","webpack:///./lib/index.js","webpack:///./lib/configurer.js","webpack:///./lib/middleware.js","webpack:///./lib/reducer.js","webpack:///./lib/actions.js","webpack:///./lib/hoc.js","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack:///./lib/selectors.js"],"names":["isEntity","createEntitiesForTypes","getRecordSchemaForType","createRecordsForTypes","getDefinitionOfType","addDefinitionsForTypes","getConvertersFromSchema","getDataFromResponse","graphQLizr","graphQLRecordr","convertsEntityToRecord","convertsNormalizedEntitiesToRecords","convertsGraphQLResultToRootEntitiesIDs","convertsGraphQLQueryResultToRecords","convertsGraphQLResultToRecords","isGraphQLIntegratedType","typeName","includes","graphQLType","markers","Object","keys","getFields","reduce","red","fieldName","typesMap","assign","Entity","type","undefined","entities","fields","field","name","definition","length","ofType","forEach","define","schema","getQueryType","entityType","converters","data","key","Array","isArray","_typeMap","getTypeMap","records","entity","graphQLSchema","recordsTypes","console","error","Error","map","v","reduction","entityId","result","set","filter","id","associatedQuery","recordTypes","rootQuery","queries","convertedField","hashString","str","hash","i","char","charCodeAt","configure","context","__debug","graphQLCompiledSchema","selectorSchema","normalizrModel","recordsModel","actions","middleware","reducer","GraphQLConnecter","typesSchema","action","graphql","payload","store","dependencies","then","errors","dispatch","packageData","request","ql","response","raw","notifyError","next","configureReducer","ResultsRecord","byQuery","byEntity","QueryRecord","results","DataReducerRecord","normalizrTypes","warnBadIDRequest","supposedId","warn","getID","toString","state","normalized","JSON","parse","stringify","update","mergeDeepWith","a","b","query","value","deleteIn","configureActions","removeData","identifiers","err","configureConnecter","reducerName","mapPropsToNeeds","mapCacheToProps","shouldRefetch","WrappedComponent","props","selectedData","getNeeds","selectData","nextProps","prevProps","warnAgainstEmptyQuery","log","Date","now","db","queryHash","convertedData","reducerChanged","setState","needs","Component","convertsFieldToSelectorField","convertsTypeToSelectorType","convertsTypeMapToSelectorTypeMap","convertsRootQueryToSelectorRootQuery","convertsTypesSchemaToSelectorSchema","getResolveQuery","entityName","resolveQuery","parent","args","rootValue","returnType","path","queryResult","getIn","getEntityTypeNameFromSelectorTypeName","getResolveEntity","resolveEntity","fieldValue","getSelectorTypeName","substring","getSelectorTypeFromType","convertsArgsArrayToArgsMap","arg","resolver","description","resolve","typeMap","selectorName","newTypeMap","selectorTypeMap","selectorTypesMap","typesQuery","selectorTypesQuery"],"mappings":"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","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"graphql\"), require(\"immutable\"), require(\"normalizr\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"graphql\", \"immutable\", \"normalizr\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReduxDataFetching\"] = factory(require(\"graphql\"), require(\"immutable\"), require(\"normalizr\"), require(\"react\"));\n\telse\n\t\troot[\"ReduxDataFetching\"] = factory(root[undefined], root[undefined], root[undefined], root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ac2c2db4a830cd2770ce","\"use babel\";\r\n// @flow\r\n\r\nimport { schema } from \"normalizr\";\r\nimport {\r\n  printSchema,\r\n  graphql,\r\n  GraphQLObjectType,\r\n  GraphQLSchema,\r\n  GraphQLString,\r\n  GraphQLFloat,\r\n  GraphQLList,\r\n  GraphQLInt,\r\n  GraphQLBoolean,\r\n  GraphQLID,\r\n  GraphQLEnumType,\r\n  getNullableType,\r\n  getNamedType,\r\n} from \"graphql\";\r\nimport type {\r\n  GraphQLSchema as GraphQLSchemaType,\r\n  GraphQLNamedType,\r\n  GraphQLType,\r\n  GraphQLOutputType,\r\n  GraphQLField,\r\n} from \"graphql\";\r\nimport { Record, Map, List } from \"immutable\";\r\nimport type { Record as RecordType } from \"immutable\";\r\n\r\ntype RecordTypes = { [typeName: string]: RecordType<*> };\r\n\r\nfunction isGraphQLIntegratedType(typeName: string): boolean {\r\n  return [\r\n    \"String\",\r\n    \"Boolean\",\r\n    \"Int\",\r\n    \"ID\",\r\n    \"Float\",\r\n    \"__Schema\",\r\n    \"__Type\",\r\n    \"__TypeKind\",\r\n    \"__Field\",\r\n    \"__InputValue\",\r\n    \"__EnumValue\",\r\n    \"__Directive\",\r\n    \"__DirectiveLocation\",\r\n  ].includes(typeName);\r\n}\r\n\r\nexport function isEntity(\r\n  graphQLType: GraphQLNamedType,\r\n  markers: Array<string> = [\"id\"],\r\n): boolean {\r\n  return (\r\n    graphQLType instanceof GraphQLObjectType &&\r\n    Object.keys(graphQLType.getFields()).reduce(\r\n      (red, fieldName) => red || markers.includes(fieldName),\r\n      false,\r\n    )\r\n  );\r\n}\r\n\r\nexport function createEntitiesForTypes(\r\n  typesMap: { [typeName: string]: GraphQLNamedType },\r\n  markers: Array<string>,\r\n): { [typeName: string]: schema.Entity } {\r\n  return Object.keys(typesMap).reduce(\r\n    (red, typeName) =>\r\n      isGraphQLIntegratedType(typeName) ||\r\n      !isEntity(typesMap[typeName], markers)\r\n        ? red\r\n        : Object.assign(red, { [typeName]: new schema.Entity(typeName) }, {}),\r\n    {},\r\n  );\r\n}\r\n\r\nexport function getRecordSchemaForType(\r\n  type: GraphQLObjectType,\r\n): { [fieldName: string]: typeof undefined } {\r\n  return Object.keys(type.getFields()).reduce(\r\n    (red, fieldName) => Object.assign({}, red, { [fieldName]: undefined }),\r\n    {},\r\n  );\r\n}\r\n\r\nexport function createRecordsForTypes(typesMap: {\r\n  [typeName: string]: $FlowFixMe,\r\n}) {\r\n  return Object.keys(typesMap).reduce(\r\n    (red, typeName) =>\r\n      isGraphQLIntegratedType(typeName) ||\r\n      !(typesMap[typeName] instanceof GraphQLObjectType)\r\n        ? red\r\n        : Object.assign(red, {\r\n            [typeName]: Record(\r\n              getRecordSchemaForType(typesMap[typeName]),\r\n              typeName,\r\n            ),\r\n          }),\r\n    {},\r\n  );\r\n}\r\n\r\nexport function getDefinitionOfType(\r\n  graphQLType: GraphQLType,\r\n  entities: { [typeName: string]: schema.Entity },\r\n) {\r\n  if (graphQLType instanceof GraphQLObjectType) {\r\n    const fields = Object.keys(\r\n      graphQLType.getFields(),\r\n    ).reduce((red, fieldName) => {\r\n      // $FlowFixMe\r\n      const field = graphQLType.getFields()[fieldName];\r\n      // $FlowFixMe\r\n      if (field.type.name in entities)\r\n        return Object.assign({}, red, {\r\n          // $FlowFixMe\r\n          [fieldName]: entities[field.type.name],\r\n        });\r\n      else {\r\n        const definition = getDefinitionOfType(field.type, entities);\r\n        if (definition)\r\n          return Object.assign({}, red, { [fieldName]: definition });\r\n        else return red;\r\n      }\r\n    }, {});\r\n    if (Object.keys(fields).length > 0) return fields;\r\n    else return undefined;\r\n  } else if (graphQLType instanceof GraphQLList) {\r\n    if (graphQLType.ofType.name in entities)\r\n      return [entities[graphQLType.ofType.name]];\r\n    else return undefined;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport function addDefinitionsForTypes(\r\n  typesMap: { [typeName: string]: GraphQLNamedType },\r\n  entities: { [typeName: string]: schema.Entity },\r\n): void {\r\n  Object.keys(typesMap).forEach(typeName => {\r\n    if (\r\n      isGraphQLIntegratedType(typeName) === false &&\r\n      entities[typeName] instanceof schema.Entity\r\n    ) {\r\n      const definition = getDefinitionOfType(typesMap[typeName], entities);\r\n      entities[typeName].define(definition || {});\r\n    }\r\n  });\r\n}\r\n\r\nexport function getConvertersFromSchema(\r\n  schema: GraphQLSchemaType,\r\n): { [fieldName: string]: string } {\r\n  return Object.keys(schema.getQueryType().getFields()).reduce((red, field) => {\r\n    const type = schema.getQueryType().getFields()[field].type;\r\n    let entityType;\r\n    if (type instanceof GraphQLList) entityType = getNamedType(type).name;\r\n    else if (type instanceof GraphQLEnumType) entityType = type.name;\r\n    else entityType = getNamedType(type).name;\r\n    return Object.assign({}, red, { [field]: entityType });\r\n  }, {});\r\n}\r\n\r\nexport function getDataFromResponse(\r\n  converters: { [fieldName: string]: string },\r\n  data: Object,\r\n) {\r\n  return Object.keys(data).reduce((red, key) => {\r\n    return Object.assign({}, red, {\r\n      [converters[key]]: Array.isArray(data[key]) ? data[key] : [data[key]],\r\n    });\r\n  }, {});\r\n}\r\n\r\nexport function graphQLizr(\r\n  schema: GraphQLSchemaType,\r\n  { markers = [\"id\"] }: { markers: Array<string> } = {},\r\n): {\r\n  entities: { [typeName: string]: schema.Entity },\r\n  converters: { [fieldName: string]: string },\r\n} {\r\n  const entities = createEntitiesForTypes(schema._typeMap, markers);\r\n  const converters = getConvertersFromSchema(schema);\r\n  addDefinitionsForTypes(schema.getTypeMap(), entities);\r\n  return { entities, converters };\r\n}\r\n\r\nexport function graphQLRecordr(schema: GraphQLSchemaType) {\r\n  const records = createRecordsForTypes(schema.getTypeMap());\r\n  return records;\r\n}\r\n\r\nexport function convertsEntityToRecord(\r\n  entity?: ?Object | mixed,\r\n  type: string,\r\n  graphQLSchema: GraphQLSchemaType,\r\n  recordsTypes: RecordTypes,\r\n): RecordType<*> | mixed {\r\n  if (typeof entity !== \"object\" || entity == null) return entity;\r\n  if (Array.isArray(entity) === true) {\r\n    console.error(\"Trying to convert\", entity, \"into a Record of type\", type);\r\n    throw new Error(\r\n      \"ILS is trying to convert an Array in a Record which is impossible, you may have called packageData with wrong types (Array instead of Object) or something wrong with the normalization\",\r\n    );\r\n  }\r\n  // $FlowFixMe\r\n  return new recordsTypes[type](\r\n    Object.keys(entity).reduce((red, key) => {\r\n      // $FlowFixMe\r\n      const field = entity[key];\r\n      if (\r\n        typeof field == \"object\" &&\r\n        Array.isArray(field) == false &&\r\n        field != null\r\n      ) {\r\n        if (\r\n          graphQLSchema.getTypeMap()[type] == null ||\r\n          !(graphQLSchema.getTypeMap()[type] instanceof GraphQLObjectType) ||\r\n          // $FlowFixMe\r\n          graphQLSchema.getTypeMap()[type].getFields()[key] == null\r\n        ) {\r\n          console.error(\r\n            \"Error trying to convert entity\",\r\n            entity,\r\n            \"to record of type\",\r\n            type,\r\n          );\r\n          throw new Error(\r\n            `Error has been detected when trying to access the field with key ${key}, if key is a number you may have wrapped data, sent to packageData, in an array where you shouldn't`,\r\n          );\r\n        }\r\n        return Object.assign({}, red, {\r\n          [key]: convertsEntityToRecord(\r\n            field,\r\n            // $FlowFixMe\r\n            graphQLSchema.getTypeMap()[type].getFields()[key].type.name,\r\n            graphQLSchema,\r\n            recordsTypes,\r\n          ),\r\n        });\r\n      } else if (typeof field == \"object\" && Array.isArray(field) === true) {\r\n        return Object.assign({}, red, {\r\n          [key]: field.map(\r\n            v =>\r\n              typeof v === \"object\"\r\n                ? convertsEntityToRecord(\r\n                    v,\r\n                    // $FlowFixMe\r\n                    graphQLSchema.getTypeMap()[type].getFields()[key].type\r\n                      .ofType.name,\r\n                    graphQLSchema,\r\n                    recordsTypes,\r\n                  )\r\n                : v,\r\n          ),\r\n        });\r\n      } else {\r\n        return Object.assign({}, red, { [key]: field });\r\n      }\r\n    }, {}),\r\n  );\r\n}\r\n\r\nexport function convertsNormalizedEntitiesToRecords(\r\n  entities: { [typeName: string]: { [id: string]: Object } },\r\n  recordsTypes: RecordTypes,\r\n  graphQLSchema: GraphQLSchemaType,\r\n): { [typeName: string]: { [id: string]: RecordType<*> } } {\r\n  return Object.keys(entities).reduce((red, typeName) => {\r\n    return Object.assign({}, red, {\r\n      [typeName]: Object.keys(\r\n        entities[typeName],\r\n      ).reduce((reduction, entityId) => {\r\n        return Object.assign({}, reduction, {\r\n          [entityId]: convertsEntityToRecord(\r\n            entities[typeName][entityId],\r\n            typeName,\r\n            graphQLSchema,\r\n            recordsTypes,\r\n          ),\r\n        });\r\n      }, {}),\r\n    });\r\n  }, {});\r\n}\r\n\r\nexport function convertsGraphQLResultToRootEntitiesIDs(\r\n  result: Object,\r\n): { [entityName: string]: Array<string | number> | string | number } {\r\n  return Object.keys(result).reduce((red, key) => {\r\n    if (!Array.isArray(result[key]) && result[key] == null) return red;\r\n    return red.set(\r\n      key,\r\n      Array.isArray(result[key])\r\n        ? result[key].filter(entity => entity != null).map(entity => entity.id)\r\n        : result[key].id,\r\n    );\r\n  }, Map());\r\n}\r\n\r\nexport function convertsGraphQLQueryResultToRecords(\r\n  result: mixed,\r\n  associatedQuery: GraphQLField<any, any>,\r\n  schema: GraphQLSchema,\r\n  recordTypes: RecordTypes,\r\n) {\r\n  if (Array.isArray(result))\r\n    return List(result).map(v =>\r\n      convertsGraphQLQueryResultToRecords(\r\n        v,\r\n        associatedQuery,\r\n        schema,\r\n        recordTypes,\r\n      ),\r\n    );\r\n  else if (typeof result === \"object\" && result !== null) {\r\n    return convertsEntityToRecord(\r\n      result,\r\n      getNamedType(associatedQuery.type).name,\r\n      schema,\r\n      recordTypes,\r\n    );\r\n  } else {\r\n    return result;\r\n  }\r\n}\r\n\r\nexport function convertsGraphQLResultToRecords(\r\n  result: Object,\r\n  schema: GraphQLSchema,\r\n  recordTypes: RecordTypes,\r\n): Object {\r\n  const rootQuery = schema.getQueryType();\r\n  const queries = rootQuery.getFields();\r\n  return Object.keys(result).reduce((red, key) => {\r\n    const field = result[key];\r\n    const associatedQuery = queries[key];\r\n    const convertedField = convertsGraphQLQueryResultToRecords(\r\n      field,\r\n      associatedQuery,\r\n      schema,\r\n      recordTypes,\r\n    );\r\n    return {\r\n      ...red,\r\n      [key]: convertedField,\r\n    };\r\n  }, {});\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/graphqlTypesConverters.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs2\":\"graphql\",\"commonjs\":\"graphql\",\"amd\":\"graphql\"}\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}\n// module id = 2\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs2\":\"normalizr\",\"commonjs\":\"normalizr\",\"amd\":\"normalizr\"}\n// module id = 3\n// module chunks = 0","// @flow\n\nexport function hashString(str: string): number {\n  let hash = 0;\n  if (str.length == 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/utils.js","// @flow\r\n\r\nexport { configure } from \"./configurer\";\r\nexport { graphQLizr, graphQLRecordr } from \"./graphqlTypesConverters\";\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/index.js","\"use babel\";\n// @flow\nimport { schema } from \"normalizr\";\nimport { buildSchema } from \"graphql\";\nimport type { GraphQLSchema } from \"graphql\";\nimport configureMiddleware from \"./middleware\";\nimport configureReducer from \"./reducer\";\nimport configureActions from \"./actions\";\nimport configureConnecter from \"./hoc\";\nimport { graphQLizr, graphQLRecordr } from \"./graphqlTypesConverters\";\nimport { convertsTypesSchemaToSelectorSchema } from \"./selectors\";\n\nexport function configure(\n  graphQLSchema: GraphQLSchema | string,\n  context: mixed,\n  { __debug = false }: { __debug?: boolean } = {},\n) {\n  const graphQLCompiledSchema =\n    typeof graphQLSchema === \"string\"\n      ? buildSchema(graphQLSchema)\n      : graphQLSchema;\n  const selectorSchema = convertsTypesSchemaToSelectorSchema(\n    graphQLCompiledSchema,\n    { __debug },\n  );\n  const normalizrModel = graphQLizr(graphQLCompiledSchema);\n  const recordsModel = graphQLRecordr(graphQLCompiledSchema);\n  const actions = configureActions();\n  const middleware = configureMiddleware(\n    graphQLCompiledSchema,\n    actions,\n    normalizrModel,\n    context,\n  );\n  const reducer = configureReducer(\n    normalizrModel.entities,\n    recordsModel,\n    graphQLCompiledSchema,\n  );\n  const GraphQLConnecter = configureConnecter({\n    selectorSchema,\n    typesSchema: graphQLCompiledSchema,\n    recordTypes: recordsModel,\n  });\n  return {\n    actions,\n    middleware,\n    reducer,\n    normalizrModel,\n    recordsModel,\n    selectorSchema,\n    GraphQLConnecter,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/configurer.js","import { hashString } from \"./utils\";\nimport { graphql } from \"graphql\";\nimport { getDataFromResponse } from \"./graphqlTypesConverters\";\n\nexport default function(schema, actions, normalizrModel, context) {\n  return store => next => action => {\n    if (action.graphql) {\n      graphql(schema, action.payload, undefined, {\n        store,\n        dependencies: context,\n      }).then(result => {\n        if (result.errors === undefined) {\n          store.dispatch(\n            actions.packageData(\n              getDataFromResponse(normalizrModel.converters, result.data),\n              {\n                request: {\n                  ql: action.payload,\n                  hash: hashString(action.payload),\n                },\n                response: {\n                  raw: result.data,\n                },\n              },\n            ),\n          );\n        } else {\n          store.dispatch(actions.notifyError(result.errors, action.payload));\n        }\n      });\n    } else {\n      return next(action);\n    }\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/middleware.js","\"use babel\";\r\n// @flow\r\n\r\nimport { fromJS, Map, List, Set, Record } from \"immutable\";\r\nimport { normalize, schema } from \"normalizr\";\r\nimport {\r\n  graphQLizr,\r\n  convertsNormalizedEntitiesToRecords,\r\n  convertsGraphQLResultToRootEntitiesIDs,\r\n} from \"./graphqlTypesConverters\";\r\nimport type { GraphQLSchema as GraphQLSchemaType } from \"graphql\";\r\n\r\nexport const ResultsRecord = Record({ byQuery: Map(), byEntity: Map() });\r\nexport const QueryRecord = Record({ results: new ResultsRecord() });\r\nexport const DataReducerRecord = Record({\r\n  entities: Map(),\r\n  queries: Map(),\r\n});\r\n\r\nexport default function configureReducer(\r\n  normalizrTypes: { [typeName: string]: schema.Entity },\r\n  recordsTypes: { [typeName: string]: Record<*> },\r\n  graphQLSchema: GraphQLSchemaType,\r\n) {\r\n  function warnBadIDRequest(type: string, supposedId: mixed): void {\r\n    console.warn(\r\n      \"You're trying to delete a key of bad type for type\",\r\n      type,\r\n      \":\",\r\n      supposedId,\r\n      \".Keys must be of type number, string or identified object eg: {id: 'key'}. Aborting request\",\r\n    );\r\n  }\r\n\r\n  function getID(data: string | number | { id: string }): ?string {\r\n    if (typeof data === \"string\") return data;\r\n    else if (typeof data === \"number\") return data.toString();\r\n    else if (typeof data === \"object\" && data !== null) {\r\n      return getID(data.id);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return function reducer(\r\n    state: DataReducerRecord = new DataReducerRecord(),\r\n    action: { type: string, payload: Object },\r\n  ) {\r\n    switch (action.type) {\r\n      case \"DATA_RECEIVED\":\r\n        const normalizrModel = Object.keys(\r\n          action.payload.entities,\r\n        ).reduce((red, key) => {\r\n          const type = normalizrTypes[key];\r\n          if (type === undefined)\r\n            throw new Error(\r\n              \"You can't normalize a type which is not an Entity. An Entity is a type with an id attribut. You may have defined a GraphQL root query type with a route that has a type without any id.\",\r\n            );\r\n          return Object.assign({}, red, {\r\n            [key]:\r\n              typeof action.payload.entities[key] == \"object\" &&\r\n              Array.isArray(action.payload.entities[key])\r\n                ? [type]\r\n                : type,\r\n          });\r\n        }, {});\r\n        const normalized = normalize(\r\n          JSON.parse(JSON.stringify(action.payload.entities)),\r\n          normalizrModel,\r\n        );\r\n        return state\r\n          .update(\"entities\", entities =>\r\n            entities.mergeDeepWith(\r\n              (a, b) => (b === undefined ? a : b),\r\n              convertsNormalizedEntitiesToRecords(\r\n                normalized.entities,\r\n                recordsTypes,\r\n                graphQLSchema,\r\n              ),\r\n            ),\r\n          )\r\n          .update(\r\n            \"queries\",\r\n            queries =>\r\n              action.payload.query\r\n                ? queries.set(\r\n                    action.payload.query.request.hash,\r\n                    new QueryRecord({\r\n                      results: new ResultsRecord({\r\n                        byQuery: convertsGraphQLResultToRootEntitiesIDs(\r\n                          action.payload.query.response.raw,\r\n                        ),\r\n                      }),\r\n                    }),\r\n                  )\r\n                : queries,\r\n          );\r\n      case \"DATA_REMOVED\":\r\n        return Object.keys(action.payload).reduce((red, key: string) => {\r\n          if (\r\n            typeof action.payload[key] == \"object\" &&\r\n            Array.isArray(action.payload[key])\r\n          ) {\r\n            return action.payload[key].reduce((reduction, value) => {\r\n              const id = getID(value);\r\n              if (id == null) {\r\n                warnBadIDRequest(key, value);\r\n                return reduction;\r\n              } else {\r\n                return reduction.deleteIn([\"entities\", key, id]);\r\n              }\r\n            }, red);\r\n          } else {\r\n            const id = getID(action.payload[key]);\r\n            if (id == null) {\r\n              warnBadIDRequest(key, action.payload[key]);\r\n              return red;\r\n            } else {\r\n              // $FlowFixMe\r\n              return red.deleteIn([\"entities\", key, id]);\r\n            }\r\n          }\r\n        }, state);\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/reducer.js","\"use babel\";\r\n// @flow\r\n\r\ntype QueryRequest = {\r\n  ql: string,\r\n  hash: string,\r\n};\r\n\r\ntype QueryDetails = {\r\n  request: QueryRequest,\r\n  response: {\r\n    raw: Object,\r\n  },\r\n};\r\n\r\nexport default function configureActions() {\r\n  return {\r\n    packageData(data: Object, query?: QueryDetails) {\r\n      return {\r\n        type: \"DATA_RECEIVED\",\r\n        payload: {\r\n          entities: data,\r\n          query,\r\n        },\r\n      };\r\n    },\r\n    removeData(identifiers: {\r\n      [key: string]:\r\n        | number\r\n        | string\r\n        | { id: string | number }\r\n        | Array<number | string | { id: string | number }>,\r\n    }) {\r\n      return {\r\n        type: \"DATA_REMOVED\",\r\n        payload: identifiers,\r\n      };\r\n    },\r\n    notifyError(err: mixed, query: string) {\r\n      return {\r\n        type: \"GRAPHQL_ERRORS_RECEIVED\",\r\n        payload: {\r\n          errors: err,\r\n          query: query,\r\n        },\r\n      };\r\n    },\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/actions.js","\"use babel\";\n// @flow\n\nimport React from \"react\";\nimport { graphql, GraphQLSchema } from \"graphql\";\nimport { fromJS } from \"immutable\";\nimport { convertsGraphQLResultToRecords } from \"./graphqlTypesConverters\";\nimport { hashString } from \"./utils\";\nimport type { Record } from \"immutable\";\n\ntype Props = Object;\n\ntype State = {\n  selectedData: ?Object,\n};\n\nexport default function configureConnecter(\n  {\n    typesSchema,\n    selectorSchema,\n    recordTypes,\n    reducerName = \"data\",\n  }: {\n    typesSchema: GraphQLSchema,\n    selectorSchema: GraphQLSchema,\n    recordTypes: { [typeName: string]: Record<any> },\n    reducerName?: string,\n  } = {},\n) {\n  if (typesSchema === undefined) {\n    throw new Error(\n      \"You have to define a type schema, type schema is currently \" +\n        typesSchema,\n    );\n  }\n  if (selectorSchema === undefined) {\n    throw new Error(\n      \"You have to define a selector schema, selector schema is currently \" +\n        selectorSchema,\n    );\n  }\n  return function GraphQLConnecter(\n    mapPropsToNeeds: (props: Props) => string,\n    mapCacheToProps: (\n      cache: any,\n      props: Props,\n      selectedData: Object,\n    ) => any = () => ({}),\n    shouldRefetch: (props: Props, prevProps: Props) => boolean = () => false,\n  ) {\n    return function(\n      WrappedComponent: Class<React.Component<any, any, any>>,\n    ): Class<React.Component<any, any, any>> {\n      return class GraphQLContainer extends React.Component<any, Props, any> {\n        props: Props;\n\n        constructor(props) {\n          super(props);\n\n          this.state = {\n            selectedData: {},\n          };\n        }\n\n        componentDidMount() {\n          this.getNeeds();\n          this.selectData();\n        }\n\n        componentWillReceiveProps(nextProps: Props) {\n          if (\n            mapPropsToNeeds(nextProps) != mapPropsToNeeds(this.props) ||\n            nextProps[reducerName] !== this.props[reducerName]\n          ) {\n            this.selectData();\n          }\n        }\n\n        componentDidUpdate(prevProps: Props) {\n          if (\n            mapPropsToNeeds(this.props) != mapPropsToNeeds(prevProps) ||\n            shouldRefetch(this.props, prevProps)\n          ) {\n            this.getNeeds();\n          }\n        }\n\n        warnAgainstEmptyQuery() {\n          console.warn(\n            \"You have defined as needs {}, which is a wrong graphql query. If you want to avoid fetching, return null instead\",\n          );\n        }\n\n        selectData() {\n          const query = mapPropsToNeeds(this.props);\n          const hash = hashString(query);\n          const reducer = this.props[reducerName];\n          if (query === \"{}\" || query === \"{ }\") {\n            this.warnAgainstEmptyQuery();\n          } else if (query != null) {\n            if (this.props.__debug) {\n              console.log(\n                \"SELECTING data for hash\",\n                hash,\n                \" -- date:\",\n                Date.now(),\n              );\n            }\n            graphql(selectorSchema, query, null, {\n              db: reducer,\n              queryHash: hash,\n            }).then(result => {\n              if (result.errors !== undefined || result.data == null) {\n                console.error(\n                  \"GraphQLConnecter: Impossible to select data. needs:\",\n                  query,\n                  \"errors:\",\n                  result.errors,\n                );\n              } else {\n                if (this.props.__debug) {\n                  console.log(\n                    \"SELECTED data\",\n                    result.data,\n                    \"for hash\",\n                    hash,\n                    \"with reducer\",\n                    reducer,\n                    \" -- date:\",\n                    Date.now(),\n                  );\n                }\n                const convertedData = convertsGraphQLResultToRecords(\n                  result.data,\n                  typesSchema,\n                  recordTypes,\n                );\n                const reducerChanged = this.props[reducerName] !== reducer;\n                if (this.props.__debug) {\n                  console.log(\n                    \"CONVERTED data\",\n                    result.data,\n                    \"into\",\n                    convertedData,\n                    \"for hash\",\n                    \"with reducer\",\n                    reducer,\n                    reducerChanged ? \"but reducer has changed to\" : \"\",\n                    reducerChanged ? this.props[reducerName] : \"\",\n                    reducerChanged ? \"relaunching selection\" : \"\",\n                  );\n                }\n                if (reducerChanged) {\n                  this.selectData();\n                } else {\n                  this.setState(state => ({ selectedData: convertedData }));\n                }\n              }\n            });\n          }\n        }\n\n        getNeeds() {\n          const needs = mapPropsToNeeds(this.props);\n          if (needs === \"{}\" || needs === \"{ }\") {\n            this.warnAgainstEmptyQuery();\n          } else if (needs != null) {\n            this.props.dispatch({\n              type: \"GRAPHQL_FETCH\",\n              graphql: true,\n              payload: needs,\n            });\n          }\n        }\n\n        render() {\n          if (!this.props[reducerName])\n            throw new Error(\n              `GraphQLConnecter must get the cache reducer as a props named '${reducerName}'`,\n            );\n          if (!this.props.dispatch)\n            throw new Error(\n              \"GraphQLConnecter must get the dispatch function as props\",\n            );\n          return (\n            <WrappedComponent\n              {...this.props}\n              {...this.state.selectedData}\n              {...mapCacheToProps(\n                this.props.data,\n                this.props,\n                this.state.selectedData,\n              )}\n              refetch={() => this.getNeeds()}\n            />\n          );\n        }\n      };\n    };\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/hoc.js","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n// module id = 11\n// module chunks = 0","// @flow\n\nimport type {\n  GraphQLOutputType,\n  GraphQLType,\n  GraphQLField,\n  GraphQLNamedType,\n  GraphQLArgument,\n  GraphQLArgumentConfig,\n  GraphQLFieldConfigMap,\n  GraphQLFieldConfig,\n  GraphQLResolveInfo,\n} from \"graphql\";\nimport { Map } from \"immutable\";\nimport {\n  printSchema,\n  graphql,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLList,\n  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLEnumType,\n  GraphQLUnionType,\n  getNamedType,\n} from \"graphql\";\nimport { isEntity } from \"./graphqlTypesConverters\";\n\ntype TypeMap = { [typeName: string]: GraphQLNamedType };\n\nfunction getResolveQuery(entityName: string) {\n  return function resolveQuery(\n    parent,\n    args,\n    context,\n    { rootValue, fieldName, returnType, path }: GraphQLResolveInfo,\n  ) {\n    if (context == null || context.db == null || context.queryHash == null)\n      throw new Error(\n        \"You have to pass database (entities and results) as db and graphql query as queryHash in contextValue\",\n      );\n    const queryResult = context.db.getIn([\n      \"queries\",\n      context.queryHash,\n      \"results\",\n      \"byQuery\",\n      path !== undefined ? path.key : fieldName,\n    ]);\n    if (queryResult == null) {\n      if (returnType instanceof GraphQLList) return [];\n      else return null;\n    }\n    if (returnType instanceof GraphQLList) {\n      const typeName = getEntityTypeNameFromSelectorTypeName(\n        getNamedType(returnType.ofType).name,\n      );\n      return queryResult.map(id =>\n        context.db.getIn([\"entities\", typeName, id.toString()]),\n      );\n    } else if (queryResult != null) {\n      return context.db.getIn([\n        \"entities\",\n        getEntityTypeNameFromSelectorTypeName(getNamedType(returnType).name),\n        queryResult.toString(),\n      ]);\n    } else {\n      return null;\n    }\n  };\n}\n\nfunction getResolveEntity(entityName: string) {\n  return function resolveEntity(\n    parent,\n    args,\n    context,\n    { rootValue, fieldName, returnType }: GraphQLResolveInfo = {},\n  ) {\n    const fieldValue = parent[fieldName];\n    if (returnType instanceof GraphQLList && fieldValue != null) {\n      return fieldValue.map(id =>\n        context.db.getIn([\"entities\", entityName, id.toString()]),\n      );\n    } else if (fieldValue != null) {\n      return context.db.getIn([\"entities\", entityName, fieldValue.toString()]);\n    } else {\n      return null;\n    }\n  };\n}\n\nfunction getSelectorTypeName(name: string): string {\n  return `${name}Selector`;\n}\n\nfunction getEntityTypeNameFromSelectorTypeName(name: string): string {\n  return name.substring(0, name.length - 8);\n}\n\nfunction getSelectorTypeFromType(\n  type: GraphQLOutputType,\n  typesMap: TypeMap,\n): GraphQLOutputType {\n  if (type instanceof GraphQLList)\n    return new GraphQLList(getSelectorTypeFromType(type.ofType, typesMap));\n  else if (type instanceof GraphQLObjectType) {\n    const typeName = getSelectorTypeName(getNamedType(type).name);\n    if (typesMap[typeName] == null) {\n      throw new Error(\n        \"Something went wrong in schema conversions. Trying to access \" +\n          typeName +\n          \" type is impossible in Selectors Schema TypeMap\",\n      );\n    }\n    // $FlowFixMe\n    return typesMap[typeName];\n  } else {\n    return type;\n  }\n}\n\nfunction convertsArgsArrayToArgsMap(\n  args: Array<GraphQLArgument>,\n): { [argName: string]: GraphQLArgumentConfig } {\n  return args.reduce(\n    (red, arg): { [argName: string]: GraphQLArgumentConfig } => ({\n      ...red,\n      [arg.name]: arg,\n    }),\n    {},\n  );\n}\n\nexport function convertsFieldToSelectorField(\n  query: GraphQLField<any, any>,\n  typesMap: TypeMap,\n  type: \"entity\" | \"query\" | \"scalar\",\n): GraphQLFieldConfig<any, any> {\n  let resolver;\n  let name: string;\n  switch (type) {\n    case \"entity\":\n      name = getSelectorTypeName(query.name);\n      resolver = getResolveEntity(getNamedType(query.type).name);\n      break;\n    case \"query\":\n      name = getSelectorTypeName(query.name);\n      resolver = getResolveQuery(getNamedType(query.type).name);\n      break;\n    default:\n      name = query.name;\n  }\n  return {\n    description: query.description,\n    args: convertsArgsArrayToArgsMap(query.args),\n    type: getSelectorTypeFromType(query.type, typesMap),\n    resolve: resolver,\n  };\n}\n\nexport function convertsTypeToSelectorType(\n  type: GraphQLObjectType,\n  typeMap: TypeMap,\n): GraphQLOutputType {\n  const selectorName = getSelectorTypeName(type.name);\n  return new GraphQLObjectType({\n    name: selectorName,\n    fields: () =>\n      Object.keys(type.getFields()).reduce((red, key) => {\n        return {\n          ...red,\n          [key]: isEntity(getNamedType(type.getFields()[key].type))\n            ? convertsFieldToSelectorField(\n                type.getFields()[key],\n                typeMap,\n                \"entity\",\n              )\n            : convertsFieldToSelectorField(\n                type.getFields()[key],\n                typeMap,\n                \"scalar\",\n              ),\n        };\n      }, {}),\n  });\n}\n\nexport function convertsTypeMapToSelectorTypeMap(typeMap: TypeMap): TypeMap {\n  let newTypeMap = {};\n  Object.keys(typeMap).forEach(key => {\n    const type = typeMap[key];\n    if (/*isEntity(type) === true &&*/ type instanceof GraphQLObjectType) {\n      newTypeMap[getSelectorTypeName(key)] = convertsTypeToSelectorType(\n        type,\n        newTypeMap,\n      );\n    } else {\n      newTypeMap[key] = type;\n    }\n  });\n  return newTypeMap;\n}\n\nexport function convertsRootQueryToSelectorRootQuery(\n  rootQuery: GraphQLObjectType,\n  selectorTypeMap: TypeMap,\n): GraphQLObjectType {\n  return new GraphQLObjectType({\n    name: \"SelectorsRootQueryType\",\n    fields: Object.keys(rootQuery.getFields()).reduce((red, key) => {\n      return {\n        ...red,\n        [key]: convertsFieldToSelectorField(\n          rootQuery.getFields()[key],\n          selectorTypeMap,\n          \"query\",\n        ),\n      };\n    }, {}),\n  });\n}\n\nexport function convertsTypesSchemaToSelectorSchema(\n  schema: GraphQLSchema,\n  {\n    markers = [\"id\"],\n    __debug = false,\n  }: { markers?: Array<string>, __debug?: boolean } = {},\n): GraphQLSchema {\n  const typesMap = schema.getTypeMap();\n  const selectorTypesMap = convertsTypeMapToSelectorTypeMap(typesMap);\n  if (__debug) {\n    console.log(\n      \"DataModel TypeMap:\",\n      typesMap,\n      \"\\nSelector TypeMap:\",\n      selectorTypesMap,\n    );\n  }\n  const typesQuery = schema.getQueryType();\n  const selectorTypesQuery = convertsRootQueryToSelectorRootQuery(\n    typesQuery,\n    selectorTypesMap,\n  );\n  const selectorSchema = new GraphQLSchema({\n    query: selectorTypesQuery,\n  });\n  return selectorSchema;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/selectors.js"],"sourceRoot":""}